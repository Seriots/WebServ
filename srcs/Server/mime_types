multimap->insert( std::make_pair( ".1d-interleaved-parityfec", "application/1d-interleaved-parityfec") );
multimap->insert( std::make_pair( ".3gpdash-qoe-report+xml", "application/3gpdash-qoe-report+xml") );
multimap->insert( std::make_pair( ".3gppHal+json", "application/3gppHal+json") );
multimap->insert( std::make_pair( ".3gppHalForms+json", "application/3gppHalForms+json") );
multimap->insert( std::make_pair( ".3gpp-ims+xml", "application/3gpp-ims+xml") );
multimap->insert( std::make_pair( ".A2L", "application/A2L") );
multimap->insert( std::make_pair( ".ace+cbor", "application/ace+cbor") );
multimap->insert( std::make_pair( ".ace+json", "application/ace+json") );
multimap->insert( std::make_pair( ".activemessage", "application/activemessage") );
multimap->insert( std::make_pair( ".activity+json", "application/activity+json") );
multimap->insert( std::make_pair( ".aif+cbor", "application/aif+cbor") );
multimap->insert( std::make_pair( ".aif+json", "application/aif+json") );
multimap->insert( std::make_pair( ".alto-cdni+json", "application/alto-cdni+json") );
multimap->insert( std::make_pair( ".alto-cdnifilter+json", "application/alto-cdnifilter+json") );
multimap->insert( std::make_pair( ".alto-costmap+json", "application/alto-costmap+json") );
multimap->insert( std::make_pair( ".alto-costmapfilter+json", "application/alto-costmapfilter+json") );
multimap->insert( std::make_pair( ".alto-directory+json", "application/alto-directory+json") );
multimap->insert( std::make_pair( ".alto-endpointprop+json", "application/alto-endpointprop+json") );
multimap->insert( std::make_pair( ".alto-endpointpropparams+json", "application/alto-endpointpropparams+json") );
multimap->insert( std::make_pair( ".alto-endpointcost+json", "application/alto-endpointcost+json") );
multimap->insert( std::make_pair( ".alto-endpointcostparams+json", "application/alto-endpointcostparams+json") );
multimap->insert( std::make_pair( ".alto-error+json", "application/alto-error+json") );
multimap->insert( std::make_pair( ".alto-networkmapfilter+json", "application/alto-networkmapfilter+json") );
multimap->insert( std::make_pair( ".alto-networkmap+json", "application/alto-networkmap+json") );
multimap->insert( std::make_pair( ".alto-propmap+json", "application/alto-propmap+json") );
multimap->insert( std::make_pair( ".alto-propmapparams+json", "application/alto-propmapparams+json") );
multimap->insert( std::make_pair( ".alto-updatestreamcontrol+json", "application/alto-updatestreamcontrol+json") );
multimap->insert( std::make_pair( ".alto-updatestreamparams+json", "application/alto-updatestreamparams+json") );
multimap->insert( std::make_pair( ".AML", "application/AML") );
multimap->insert( std::make_pair( ".andrew-inset", "application/andrew-inset") );
multimap->insert( std::make_pair( ".applefile", "application/applefile") );
multimap->insert( std::make_pair( ".at+jwt", "application/at+jwt") );
multimap->insert( std::make_pair( ".ATF", "application/ATF") );
multimap->insert( std::make_pair( ".ATFX", "application/ATFX") );
multimap->insert( std::make_pair( ".atom+xml", "application/atom+xml") );
multimap->insert( std::make_pair( ".atomcat+xml", "application/atomcat+xml") );
multimap->insert( std::make_pair( ".atomdeleted+xml", "application/atomdeleted+xml") );
multimap->insert( std::make_pair( ".atomicmail", "application/atomicmail") );
multimap->insert( std::make_pair( ".atomsvc+xml", "application/atomsvc+xml") );
multimap->insert( std::make_pair( ".atsc-dwd+xml", "application/atsc-dwd+xml") );
multimap->insert( std::make_pair( ".atsc-dynamic-event-message", "application/atsc-dynamic-event-message") );
multimap->insert( std::make_pair( ".atsc-held+xml", "application/atsc-held+xml") );
multimap->insert( std::make_pair( ".atsc-rdt+json", "application/atsc-rdt+json") );
multimap->insert( std::make_pair( ".atsc-rsat+xml", "application/atsc-rsat+xml") );
multimap->insert( std::make_pair( ".ATXML", "application/ATXML") );
multimap->insert( std::make_pair( ".auth-policy+xml", "application/auth-policy+xml") );
multimap->insert( std::make_pair( ".automationml-aml+xml", "application/automationml-aml+xml") );
multimap->insert( std::make_pair( ".automationml-amlx+zip", "application/automationml-amlx+zip") );
multimap->insert( std::make_pair( ".bacnet-xdd+zip", "application/bacnet-xdd+zip") );
multimap->insert( std::make_pair( ".batch-SMTP", "application/batch-SMTP") );
multimap->insert( std::make_pair( ".beep+xml", "application/beep+xml") );
multimap->insert( std::make_pair( ".calendar+json", "application/calendar+json") );
multimap->insert( std::make_pair( ".calendar+xml", "application/calendar+xml") );
multimap->insert( std::make_pair( ".call-completion", "application/call-completion") );
multimap->insert( std::make_pair( ".CALS-1840", "application/CALS-1840") );
multimap->insert( std::make_pair( ".captive+json", "application/captive+json") );
multimap->insert( std::make_pair( ".cbor", "application/cbor") );
multimap->insert( std::make_pair( ".cbor-seq", "application/cbor-seq") );
multimap->insert( std::make_pair( ".cccex", "application/cccex") );
multimap->insert( std::make_pair( ".ccmp+xml", "application/ccmp+xml") );
multimap->insert( std::make_pair( ".ccxml+xml", "application/ccxml+xml") );
multimap->insert( std::make_pair( ".cda+xml", "application/cda+xml") );
multimap->insert( std::make_pair( ".CDFX+XML", "application/CDFX+XML") );
multimap->insert( std::make_pair( ".cdmi-capability", "application/cdmi-capability") );
multimap->insert( std::make_pair( ".cdmi-container", "application/cdmi-container") );
multimap->insert( std::make_pair( ".cdmi-domain", "application/cdmi-domain") );
multimap->insert( std::make_pair( ".cdmi-object", "application/cdmi-object") );
multimap->insert( std::make_pair( ".cdmi-queue", "application/cdmi-queue") );
multimap->insert( std::make_pair( ".cdni", "application/cdni") );
multimap->insert( std::make_pair( ".CEA", "application/CEA") );
multimap->insert( std::make_pair( ".cea-2018+xml", "application/cea-2018+xml") );
multimap->insert( std::make_pair( ".cellml+xml", "application/cellml+xml") );
multimap->insert( std::make_pair( ".cfw", "application/cfw") );
multimap->insert( std::make_pair( ".city+json", "application/city+json") );
multimap->insert( std::make_pair( ".clr", "application/clr") );
multimap->insert( std::make_pair( ".clue_info+xml", "application/clue_info+xml") );
multimap->insert( std::make_pair( ".clue+xml", "application/clue+xml") );
multimap->insert( std::make_pair( ".cms", "application/cms") );
multimap->insert( std::make_pair( ".cnrp+xml", "application/cnrp+xml") );
multimap->insert( std::make_pair( ".coap-group+json", "application/coap-group+json") );
multimap->insert( std::make_pair( ".coap-payload", "application/coap-payload") );
multimap->insert( std::make_pair( ".commonground", "application/commonground") );
multimap->insert( std::make_pair( ".concise-problem-details+cbor", "application/concise-problem-details+cbor") );
multimap->insert( std::make_pair( ".conference-info+xml", "application/conference-info+xml") );
multimap->insert( std::make_pair( ".cpl+xml", "application/cpl+xml") );
multimap->insert( std::make_pair( ".cose", "application/cose") );
multimap->insert( std::make_pair( ".cose-key", "application/cose-key") );
multimap->insert( std::make_pair( ".cose-key-set", "application/cose-key-set") );
multimap->insert( std::make_pair( ".csrattrs", "application/csrattrs") );
multimap->insert( std::make_pair( ".csta+xml", "application/csta+xml") );
multimap->insert( std::make_pair( ".CSTAdata+xml", "application/CSTAdata+xml") );
multimap->insert( std::make_pair( ".csvm+json", "application/csvm+json") );
multimap->insert( std::make_pair( ".cwl", "application/cwl") );
multimap->insert( std::make_pair( ".cwl+json", "application/cwl+json") );
multimap->insert( std::make_pair( ".cwt", "application/cwt") );
multimap->insert( std::make_pair( ".cybercash", "application/cybercash") );
multimap->insert( std::make_pair( ".dash+xml", "application/dash+xml") );
multimap->insert( std::make_pair( ".dash-patch+xml", "application/dash-patch+xml") );
multimap->insert( std::make_pair( ".dashdelta", "application/dashdelta") );
multimap->insert( std::make_pair( ".davmount+xml", "application/davmount+xml") );
multimap->insert( std::make_pair( ".dca-rft", "application/dca-rft") );
multimap->insert( std::make_pair( ".DCD", "application/DCD") );
multimap->insert( std::make_pair( ".dec-dx", "application/dec-dx") );
multimap->insert( std::make_pair( ".dialog-info+xml", "application/dialog-info+xml") );
multimap->insert( std::make_pair( ".dicom", "application/dicom") );
multimap->insert( std::make_pair( ".dicom+json", "application/dicom+json") );
multimap->insert( std::make_pair( ".dicom+xml", "application/dicom+xml") );
multimap->insert( std::make_pair( ".DII", "application/DII") );
multimap->insert( std::make_pair( ".DIT", "application/DIT") );
multimap->insert( std::make_pair( ".dns", "application/dns") );
multimap->insert( std::make_pair( ".dns+json", "application/dns+json") );
multimap->insert( std::make_pair( ".dns-message", "application/dns-message") );
multimap->insert( std::make_pair( ".dots+cbor", "application/dots+cbor") );
multimap->insert( std::make_pair( ".dskpp+xml", "application/dskpp+xml") );
multimap->insert( std::make_pair( ".dssc+der", "application/dssc+der") );
multimap->insert( std::make_pair( ".dssc+xml", "application/dssc+xml") );
multimap->insert( std::make_pair( ".dvcs", "application/dvcs") );
multimap->insert( std::make_pair( ".ecmascript (OBSOLETED in favor of text/javascript)", "application/ecmascript") );
multimap->insert( std::make_pair( ".EDI-consent", "application/EDI-consent") );
multimap->insert( std::make_pair( ".EDIFACT", "application/EDIFACT") );
multimap->insert( std::make_pair( ".EDI-X12", "application/EDI-X12") );
multimap->insert( std::make_pair( ".efi", "application/efi") );
multimap->insert( std::make_pair( ".elm+json", "application/elm+json") );
multimap->insert( std::make_pair( ".elm+xml", "application/elm+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.cap+xml", "application/EmergencyCallData.cap+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.Comment+xml", "application/EmergencyCallData.Comment+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.Control+xml", "application/EmergencyCallData.Control+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.DeviceInfo+xml", "application/EmergencyCallData.DeviceInfo+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.eCall.MSD", "application/EmergencyCallData.eCall.MSD") );
multimap->insert( std::make_pair( ".EmergencyCallData.ProviderInfo+xml", "application/EmergencyCallData.ProviderInfo+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.ServiceInfo+xml", "application/EmergencyCallData.ServiceInfo+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.SubscriberInfo+xml", "application/EmergencyCallData.SubscriberInfo+xml") );
multimap->insert( std::make_pair( ".EmergencyCallData.VEDS+xml", "application/EmergencyCallData.VEDS+xml") );
multimap->insert( std::make_pair( ".emma+xml", "application/emma+xml") );
multimap->insert( std::make_pair( ".emotionml+xml", "application/emotionml+xml") );
multimap->insert( std::make_pair( ".encaprtp", "application/encaprtp") );
multimap->insert( std::make_pair( ".epp+xml", "application/epp+xml") );
multimap->insert( std::make_pair( ".epub+zip", "application/epub+zip") );
multimap->insert( std::make_pair( ".eshop", "application/eshop") );
multimap->insert( std::make_pair( ".example", "application/example") );
multimap->insert( std::make_pair( ".exi", "application/exi") );
multimap->insert( std::make_pair( ".expect-ct-report+json", "application/expect-ct-report+json") );
multimap->insert( std::make_pair( ".express", "application/express") );
multimap->insert( std::make_pair( ".fastinfoset", "application/fastinfoset") );
multimap->insert( std::make_pair( ".fastsoap", "application/fastsoap") );
multimap->insert( std::make_pair( ".fdf", "application/fdf") );
multimap->insert( std::make_pair( ".fdt+xml", "application/fdt+xml") );
multimap->insert( std::make_pair( ".fhir+json", "application/fhir+json") );
multimap->insert( std::make_pair( ".fhir+xml", "application/fhir+xml") );
multimap->insert( std::make_pair( ".fits", "application/fits") );
multimap->insert( std::make_pair( ".flexfec", "application/flexfec") );
multimap->insert( std::make_pair( ".font-sfnt - DEPRECATED in favor of font/sfnt", "application/font-sfnt") );
multimap->insert( std::make_pair( ".font-tdpfr", "application/font-tdpfr") );
multimap->insert( std::make_pair( ".font-woff - DEPRECATED in favor of font/woff", "application/font-woff") );
multimap->insert( std::make_pair( ".framework-attributes+xml", "application/framework-attributes+xml") );
multimap->insert( std::make_pair( ".geo+json", "application/geo+json") );
multimap->insert( std::make_pair( ".geo+json-seq", "application/geo+json-seq") );
multimap->insert( std::make_pair( ".geopackage+sqlite3", "application/geopackage+sqlite3") );
multimap->insert( std::make_pair( ".geoxacml+xml", "application/geoxacml+xml") );
multimap->insert( std::make_pair( ".gltf-buffer", "application/gltf-buffer") );
multimap->insert( std::make_pair( ".gml+xml", "application/gml+xml") );
multimap->insert( std::make_pair( ".gzip", "application/gzip") );
multimap->insert( std::make_pair( ".H224", "application/H224") );
multimap->insert( std::make_pair( ".held+xml", "application/held+xml") );
multimap->insert( std::make_pair( ".hl7v2+xml", "application/hl7v2+xml") );
multimap->insert( std::make_pair( ".http", "application/http") );
multimap->insert( std::make_pair( ".hyperstudio", "application/hyperstudio") );
multimap->insert( std::make_pair( ".ibe-key-request+xml", "application/ibe-key-request+xml") );
multimap->insert( std::make_pair( ".ibe-pkg-reply+xml", "application/ibe-pkg-reply+xml") );
multimap->insert( std::make_pair( ".ibe-pp-data", "application/ibe-pp-data") );
multimap->insert( std::make_pair( ".iges", "application/iges") );
multimap->insert( std::make_pair( ".im-iscomposing+xml", "application/im-iscomposing+xml") );
multimap->insert( std::make_pair( ".index", "application/index") );
multimap->insert( std::make_pair( ".index.cmd", "application/index.cmd") );
multimap->insert( std::make_pair( ".index.obj", "application/index.obj") );
multimap->insert( std::make_pair( ".index.response", "application/index.response") );
multimap->insert( std::make_pair( ".index.vnd", "application/index.vnd") );
multimap->insert( std::make_pair( ".inkml+xml", "application/inkml+xml") );
multimap->insert( std::make_pair( ".IOTP", "application/IOTP") );
multimap->insert( std::make_pair( ".ipfix", "application/ipfix") );
multimap->insert( std::make_pair( ".ipp", "application/ipp") );
multimap->insert( std::make_pair( ".ISUP", "application/ISUP") );
multimap->insert( std::make_pair( ".its+xml", "application/its+xml") );
multimap->insert( std::make_pair( ".javascript (OBSOLETED in favor of text/javascript)", "application/javascript") );
multimap->insert( std::make_pair( ".jf2feed+json", "application/jf2feed+json") );
multimap->insert( std::make_pair( ".jose", "application/jose") );
multimap->insert( std::make_pair( ".jose+json", "application/jose+json") );
multimap->insert( std::make_pair( ".jrd+json", "application/jrd+json") );
multimap->insert( std::make_pair( ".jscalendar+json", "application/jscalendar+json") );
multimap->insert( std::make_pair( ".json", "application/json") );
multimap->insert( std::make_pair( ".json-patch+json", "application/json-patch+json") );
multimap->insert( std::make_pair( ".json-seq", "application/json-seq") );
multimap->insert( std::make_pair( ".jwk+json", "application/jwk+json") );
multimap->insert( std::make_pair( ".jwk-set+json", "application/jwk-set+json") );
multimap->insert( std::make_pair( ".jwt", "application/jwt") );
multimap->insert( std::make_pair( ".kpml-request+xml", "application/kpml-request+xml") );
multimap->insert( std::make_pair( ".kpml-response+xml", "application/kpml-response+xml") );
multimap->insert( std::make_pair( ".ld+json", "application/ld+json") );
multimap->insert( std::make_pair( ".lgr+xml", "application/lgr+xml") );
multimap->insert( std::make_pair( ".link-format", "application/link-format") );
multimap->insert( std::make_pair( ".linkset", "application/linkset") );
multimap->insert( std::make_pair( ".linkset+json", "application/linkset+json") );
multimap->insert( std::make_pair( ".load-control+xml", "application/load-control+xml") );
multimap->insert( std::make_pair( ".lost+xml", "application/lost+xml") );
multimap->insert( std::make_pair( ".lostsync+xml", "application/lostsync+xml") );
multimap->insert( std::make_pair( ".lpf+zip", "application/lpf+zip") );
multimap->insert( std::make_pair( ".LXF", "application/LXF") );
multimap->insert( std::make_pair( ".mac-binhex40", "application/mac-binhex40") );
multimap->insert( std::make_pair( ".macwriteii", "application/macwriteii") );
multimap->insert( std::make_pair( ".mads+xml", "application/mads+xml") );
multimap->insert( std::make_pair( ".manifest+json", "application/manifest+json") );
multimap->insert( std::make_pair( ".marc", "application/marc") );
multimap->insert( std::make_pair( ".marcxml+xml", "application/marcxml+xml") );
multimap->insert( std::make_pair( ".mathematica", "application/mathematica") );
multimap->insert( std::make_pair( ".mathml+xml", "application/mathml+xml") );
multimap->insert( std::make_pair( ".mathml-content+xml", "application/mathml-content+xml") );
multimap->insert( std::make_pair( ".mathml-presentation+xml", "application/mathml-presentation+xml") );
multimap->insert( std::make_pair( ".mbms-associated-procedure-description+xml", "application/mbms-associated-procedure-description+xml") );
multimap->insert( std::make_pair( ".mbms-deregister+xml", "application/mbms-deregister+xml") );
multimap->insert( std::make_pair( ".mbms-envelope+xml", "application/mbms-envelope+xml") );
multimap->insert( std::make_pair( ".mbms-msk-response+xml", "application/mbms-msk-response+xml") );
multimap->insert( std::make_pair( ".mbms-msk+xml", "application/mbms-msk+xml") );
multimap->insert( std::make_pair( ".mbms-protection-description+xml", "application/mbms-protection-description+xml") );
multimap->insert( std::make_pair( ".mbms-reception-report+xml", "application/mbms-reception-report+xml") );
multimap->insert( std::make_pair( ".mbms-register-response+xml", "application/mbms-register-response+xml") );
multimap->insert( std::make_pair( ".mbms-register+xml", "application/mbms-register+xml") );
multimap->insert( std::make_pair( ".mbms-schedule+xml", "application/mbms-schedule+xml") );
multimap->insert( std::make_pair( ".mbms-user-service-description+xml", "application/mbms-user-service-description+xml") );
multimap->insert( std::make_pair( ".mbox", "application/mbox") );
multimap->insert( std::make_pair( ".media_control+xml", "application/media_control+xml") );
multimap->insert( std::make_pair( ".media-policy-dataset+xml", "application/media-policy-dataset+xml") );
multimap->insert( std::make_pair( ".mediaservercontrol+xml", "application/mediaservercontrol+xml") );
multimap->insert( std::make_pair( ".merge-patch+json", "application/merge-patch+json") );
multimap->insert( std::make_pair( ".metalink4+xml", "application/metalink4+xml") );
multimap->insert( std::make_pair( ".mets+xml", "application/mets+xml") );
multimap->insert( std::make_pair( ".MF4", "application/MF4") );
multimap->insert( std::make_pair( ".mikey", "application/mikey") );
multimap->insert( std::make_pair( ".mipc", "application/mipc") );
multimap->insert( std::make_pair( ".missing-blocks+cbor-seq", "application/missing-blocks+cbor-seq") );
multimap->insert( std::make_pair( ".mmt-aei+xml", "application/mmt-aei+xml") );
multimap->insert( std::make_pair( ".mmt-usd+xml", "application/mmt-usd+xml") );
multimap->insert( std::make_pair( ".mods+xml", "application/mods+xml") );
multimap->insert( std::make_pair( ".moss-keys", "application/moss-keys") );
multimap->insert( std::make_pair( ".moss-signature", "application/moss-signature") );
multimap->insert( std::make_pair( ".mosskey-data", "application/mosskey-data") );
multimap->insert( std::make_pair( ".mosskey-request", "application/mosskey-request") );
multimap->insert( std::make_pair( ".mp21", "application/mp21") );
multimap->insert( std::make_pair( ".mp4", "application/mp4") );
multimap->insert( std::make_pair( ".mpeg4-generic", "application/mpeg4-generic") );
multimap->insert( std::make_pair( ".mpeg4-iod", "application/mpeg4-iod") );
multimap->insert( std::make_pair( ".mpeg4-iod-xmt", "application/mpeg4-iod-xmt") );
multimap->insert( std::make_pair( ".mrb-consumer+xml", "application/mrb-consumer+xml") );
multimap->insert( std::make_pair( ".mrb-publish+xml", "application/mrb-publish+xml") );
multimap->insert( std::make_pair( ".msc-ivr+xml", "application/msc-ivr+xml") );
multimap->insert( std::make_pair( ".msc-mixer+xml", "application/msc-mixer+xml") );
multimap->insert( std::make_pair( ".msword", "application/msword") );
multimap->insert( std::make_pair( ".mud+json", "application/mud+json") );
multimap->insert( std::make_pair( ".multipart-core", "application/multipart-core") );
multimap->insert( std::make_pair( ".mxf", "application/mxf") );
multimap->insert( std::make_pair( ".n-quads", "application/n-quads") );
multimap->insert( std::make_pair( ".n-triples", "application/n-triples") );
multimap->insert( std::make_pair( ".nasdata", "application/nasdata") );
multimap->insert( std::make_pair( ".news-checkgroups", "application/news-checkgroups") );
multimap->insert( std::make_pair( ".news-groupinfo", "application/news-groupinfo") );
multimap->insert( std::make_pair( ".news-transmission", "application/news-transmission") );
multimap->insert( std::make_pair( ".nlsml+xml", "application/nlsml+xml") );
multimap->insert( std::make_pair( ".node", "application/node") );
multimap->insert( std::make_pair( ".nss", "application/nss") );
multimap->insert( std::make_pair( ".oauth-authz-req+jwt", "application/oauth-authz-req+jwt") );
multimap->insert( std::make_pair( ".oblivious-dns-message", "application/oblivious-dns-message") );
multimap->insert( std::make_pair( ".ocsp-request", "application/ocsp-request") );
multimap->insert( std::make_pair( ".ocsp-response", "application/ocsp-response") );
multimap->insert( std::make_pair( ".octet-stream", "application/octet-stream") );
multimap->insert( std::make_pair( ".ODA", "application/ODA") );
multimap->insert( std::make_pair( ".odm+xml", "application/odm+xml") );
multimap->insert( std::make_pair( ".ODX", "application/ODX") );
multimap->insert( std::make_pair( ".oebps-package+xml", "application/oebps-package+xml") );
multimap->insert( std::make_pair( ".ogg", "application/ogg") );
multimap->insert( std::make_pair( ".opc-nodeset+xml", "application/opc-nodeset+xml") );
multimap->insert( std::make_pair( ".oscore", "application/oscore") );
multimap->insert( std::make_pair( ".oxps", "application/oxps") );
multimap->insert( std::make_pair( ".p21", "application/p21") );
multimap->insert( std::make_pair( ".p21+zip", "application/p21+zip") );
multimap->insert( std::make_pair( ".p2p-overlay+xml", "application/p2p-overlay+xml") );
multimap->insert( std::make_pair( ".parityfec", "application/parityfec") );
multimap->insert( std::make_pair( ".passport", "application/passport") );
multimap->insert( std::make_pair( ".patch-ops-error+xml", "application/patch-ops-error+xml") );
multimap->insert( std::make_pair( ".pdf", "application/pdf") );
multimap->insert( std::make_pair( ".PDX", "application/PDX") );
multimap->insert( std::make_pair( ".pem-certificate-chain", "application/pem-certificate-chain") );
multimap->insert( std::make_pair( ".pgp-encrypted", "application/pgp-encrypted") );
multimap->insert( std::make_pair( ".pgp-keys", "application/pgp-keys") );
multimap->insert( std::make_pair( ".pgp-signature", "application/pgp-signature") );
multimap->insert( std::make_pair( ".php", "text/php") );
multimap->insert( std::make_pair( ".pidf-diff+xml", "application/pidf-diff+xml") );
multimap->insert( std::make_pair( ".pidf+xml", "application/pidf+xml") );
multimap->insert( std::make_pair( ".pkcs10", "application/pkcs10") );
multimap->insert( std::make_pair( ".pkcs7-mime", "application/pkcs7-mime") );
multimap->insert( std::make_pair( ".pkcs7-signature", "application/pkcs7-signature") );
multimap->insert( std::make_pair( ".pkcs8", "application/pkcs8") );
multimap->insert( std::make_pair( ".pkcs8-encrypted", "application/pkcs8-encrypted") );
multimap->insert( std::make_pair( ".pkcs12", "application/pkcs12") );
multimap->insert( std::make_pair( ".pkix-attr-cert", "application/pkix-attr-cert") );
multimap->insert( std::make_pair( ".pkix-cert", "application/pkix-cert") );
multimap->insert( std::make_pair( ".pkix-crl", "application/pkix-crl") );
multimap->insert( std::make_pair( ".pkix-pkipath", "application/pkix-pkipath") );
multimap->insert( std::make_pair( ".pkixcmp", "application/pkixcmp") );
multimap->insert( std::make_pair( ".pl", "text/perl") );
multimap->insert( std::make_pair( ".pls+xml", "application/pls+xml") );
multimap->insert( std::make_pair( ".poc-settings+xml", "application/poc-settings+xml") );
multimap->insert( std::make_pair( ".postscript", "application/postscript") );
multimap->insert( std::make_pair( ".ppsp-tracker+json", "application/ppsp-tracker+json") );
multimap->insert( std::make_pair( ".problem+json", "application/problem+json") );
multimap->insert( std::make_pair( ".problem+xml", "application/problem+xml") );
multimap->insert( std::make_pair( ".provenance+xml", "application/provenance+xml") );
multimap->insert( std::make_pair( ".prs.alvestrand.titrax-sheet", "application/prs.alvestrand.titrax-sheet") );
multimap->insert( std::make_pair( ".prs.cww", "application/prs.cww") );
multimap->insert( std::make_pair( ".prs.cyn", "application/prs.cyn") );
multimap->insert( std::make_pair( ".prs.hpub+zip", "application/prs.hpub+zip") );
multimap->insert( std::make_pair( ".prs.nprend", "application/prs.nprend") );
multimap->insert( std::make_pair( ".prs.plucker", "application/prs.plucker") );
multimap->insert( std::make_pair( ".prs.rdf-xml-crypt", "application/prs.rdf-xml-crypt") );
multimap->insert( std::make_pair( ".prs.xsf+xml", "application/prs.xsf+xml") );
multimap->insert( std::make_pair( ".pskc+xml", "application/pskc+xml") );
multimap->insert( std::make_pair( ".pvd+json", "application/pvd+json") );
multimap->insert( std::make_pair( ".py", "text/python3") );
multimap->insert( std::make_pair( ".rdf+xml", "application/rdf+xml") );
multimap->insert( std::make_pair( ".route-apd+xml", "application/route-apd+xml") );
multimap->insert( std::make_pair( ".route-s-tsid+xml", "application/route-s-tsid+xml") );
multimap->insert( std::make_pair( ".route-usd+xml", "application/route-usd+xml") );
multimap->insert( std::make_pair( ".QSIG", "application/QSIG") );
multimap->insert( std::make_pair( ".raptorfec", "application/raptorfec") );
multimap->insert( std::make_pair( ".rdap+json", "application/rdap+json") );
multimap->insert( std::make_pair( ".reginfo+xml", "application/reginfo+xml") );
multimap->insert( std::make_pair( ".relax-ng-compact-syntax", "application/relax-ng-compact-syntax") );
multimap->insert( std::make_pair( ".remote-printing", "application/remote-printing") );
multimap->insert( std::make_pair( ".reputon+json", "application/reputon+json") );
multimap->insert( std::make_pair( ".resource-lists-diff+xml", "application/resource-lists-diff+xml") );
multimap->insert( std::make_pair( ".resource-lists+xml", "application/resource-lists+xml") );
multimap->insert( std::make_pair( ".rfc+xml", "application/rfc+xml") );
multimap->insert( std::make_pair( ".riscos", "application/riscos") );
multimap->insert( std::make_pair( ".rlmi+xml", "application/rlmi+xml") );
multimap->insert( std::make_pair( ".rls-services+xml", "application/rls-services+xml") );
multimap->insert( std::make_pair( ".rpki-checklist", "application/rpki-checklist") );
multimap->insert( std::make_pair( ".rpki-ghostbusters", "application/rpki-ghostbusters") );
multimap->insert( std::make_pair( ".rpki-manifest", "application/rpki-manifest") );
multimap->insert( std::make_pair( ".rpki-publication", "application/rpki-publication") );
multimap->insert( std::make_pair( ".rpki-roa", "application/rpki-roa") );
multimap->insert( std::make_pair( ".rpki-updown", "application/rpki-updown") );
multimap->insert( std::make_pair( ".rtf", "application/rtf") );
multimap->insert( std::make_pair( ".rtploopback", "application/rtploopback") );
multimap->insert( std::make_pair( ".rtx", "application/rtx") );
multimap->insert( std::make_pair( ".samlassertion+xml", "application/samlassertion+xml") );
multimap->insert( std::make_pair( ".samlmetadata+xml", "application/samlmetadata+xml") );
multimap->insert( std::make_pair( ".sarif-external-properties+json", "application/sarif-external-properties+json") );
multimap->insert( std::make_pair( ".sarif+json", "application/sarif+json") );
multimap->insert( std::make_pair( ".sbe", "application/sbe") );
multimap->insert( std::make_pair( ".sbml+xml", "application/sbml+xml") );
multimap->insert( std::make_pair( ".scaip+xml", "application/scaip+xml") );
multimap->insert( std::make_pair( ".scim+json", "application/scim+json") );
multimap->insert( std::make_pair( ".scvp-cv-request", "application/scvp-cv-request") );
multimap->insert( std::make_pair( ".scvp-cv-response", "application/scvp-cv-response") );
multimap->insert( std::make_pair( ".scvp-vp-request", "application/scvp-vp-request") );
multimap->insert( std::make_pair( ".scvp-vp-response", "application/scvp-vp-response") );
multimap->insert( std::make_pair( ".sdp", "application/sdp") );
multimap->insert( std::make_pair( ".secevent+jwt", "application/secevent+jwt") );
multimap->insert( std::make_pair( ".senml-etch+cbor", "application/senml-etch+cbor") );
multimap->insert( std::make_pair( ".senml-etch+json", "application/senml-etch+json") );
multimap->insert( std::make_pair( ".senml-exi", "application/senml-exi") );
multimap->insert( std::make_pair( ".senml+cbor", "application/senml+cbor") );
multimap->insert( std::make_pair( ".senml+json", "application/senml+json") );
multimap->insert( std::make_pair( ".senml+xml", "application/senml+xml") );
multimap->insert( std::make_pair( ".sensml-exi", "application/sensml-exi") );
multimap->insert( std::make_pair( ".sensml+cbor", "application/sensml+cbor") );
multimap->insert( std::make_pair( ".sensml+json", "application/sensml+json") );
multimap->insert( std::make_pair( ".sensml+xml", "application/sensml+xml") );
multimap->insert( std::make_pair( ".sep-exi", "application/sep-exi") );
multimap->insert( std::make_pair( ".sep+xml", "application/sep+xml") );
multimap->insert( std::make_pair( ".session-info", "application/session-info") );
multimap->insert( std::make_pair( ".set-payment", "application/set-payment") );
multimap->insert( std::make_pair( ".set-payment-initiation", "application/set-payment-initiation") );
multimap->insert( std::make_pair( ".set-registration", "application/set-registration") );
multimap->insert( std::make_pair( ".set-registration-initiation", "application/set-registration-initiation") );
multimap->insert( std::make_pair( ".SGML", "application/SGML") );
multimap->insert( std::make_pair( ".sgml-open-catalog", "application/sgml-open-catalog") );
multimap->insert( std::make_pair( ".shf+xml", "application/shf+xml") );
multimap->insert( std::make_pair( ".sieve", "application/sieve") );
multimap->insert( std::make_pair( ".simple-filter+xml", "application/simple-filter+xml") );
multimap->insert( std::make_pair( ".simple-message-summary", "application/simple-message-summary") );
multimap->insert( std::make_pair( ".simpleSymbolContainer", "application/simpleSymbolContainer") );
multimap->insert( std::make_pair( ".sipc", "application/sipc") );
multimap->insert( std::make_pair( ".slate", "application/slate") );
multimap->insert( std::make_pair( ".smil (OBSOLETED in favor of application/smil+xml)", "application/smil") );
multimap->insert( std::make_pair( ".smil+xml", "application/smil+xml") );
multimap->insert( std::make_pair( ".smpte336m", "application/smpte336m") );
multimap->insert( std::make_pair( ".soap+fastinfoset", "application/soap+fastinfoset") );
multimap->insert( std::make_pair( ".soap+xml", "application/soap+xml") );
multimap->insert( std::make_pair( ".sparql-query", "application/sparql-query") );
multimap->insert( std::make_pair( ".spdx+json", "application/spdx+json") );
multimap->insert( std::make_pair( ".sparql-results+xml", "application/sparql-results+xml") );
multimap->insert( std::make_pair( ".spirits-event+xml", "application/spirits-event+xml") );
multimap->insert( std::make_pair( ".sql", "application/sql") );
multimap->insert( std::make_pair( ".srgs", "application/srgs") );
multimap->insert( std::make_pair( ".srgs+xml", "application/srgs+xml") );
multimap->insert( std::make_pair( ".sru+xml", "application/sru+xml") );
multimap->insert( std::make_pair( ".ssml+xml", "application/ssml+xml") );
multimap->insert( std::make_pair( ".stix+json", "application/stix+json") );
multimap->insert( std::make_pair( ".swid+cbor", "application/swid+cbor") );
multimap->insert( std::make_pair( ".swid+xml", "application/swid+xml") );
multimap->insert( std::make_pair( ".tamp-apex-update", "application/tamp-apex-update") );
multimap->insert( std::make_pair( ".tamp-apex-update-confirm", "application/tamp-apex-update-confirm") );
multimap->insert( std::make_pair( ".tamp-community-update", "application/tamp-community-update") );
multimap->insert( std::make_pair( ".tamp-community-update-confirm", "application/tamp-community-update-confirm") );
multimap->insert( std::make_pair( ".tamp-error", "application/tamp-error") );
multimap->insert( std::make_pair( ".tamp-sequence-adjust", "application/tamp-sequence-adjust") );
multimap->insert( std::make_pair( ".tamp-sequence-adjust-confirm", "application/tamp-sequence-adjust-confirm") );
multimap->insert( std::make_pair( ".tamp-status-query", "application/tamp-status-query") );
multimap->insert( std::make_pair( ".tamp-status-response", "application/tamp-status-response") );
multimap->insert( std::make_pair( ".tamp-update", "application/tamp-update") );
multimap->insert( std::make_pair( ".tamp-update-confirm", "application/tamp-update-confirm") );
multimap->insert( std::make_pair( ".taxii+json", "application/taxii+json") );
multimap->insert( std::make_pair( ".td+json", "application/td+json") );
multimap->insert( std::make_pair( ".tei+xml", "application/tei+xml") );
multimap->insert( std::make_pair( ".TETRA_ISI", "application/TETRA_ISI") );
multimap->insert( std::make_pair( ".thraud+xml", "application/thraud+xml") );
multimap->insert( std::make_pair( ".timestamp-query", "application/timestamp-query") );
multimap->insert( std::make_pair( ".timestamp-reply", "application/timestamp-reply") );
multimap->insert( std::make_pair( ".timestamped-data", "application/timestamped-data") );
multimap->insert( std::make_pair( ".tlsrpt+gzip", "application/tlsrpt+gzip") );
multimap->insert( std::make_pair( ".tlsrpt+json", "application/tlsrpt+json") );
multimap->insert( std::make_pair( ".tm+json", "application/tm+json") );
multimap->insert( std::make_pair( ".tnauthlist", "application/tnauthlist") );
multimap->insert( std::make_pair( ".token-introspection+jwt", "application/token-introspection+jwt") );
multimap->insert( std::make_pair( ".trickle-ice-sdpfrag", "application/trickle-ice-sdpfrag") );
multimap->insert( std::make_pair( ".trig", "application/trig") );
multimap->insert( std::make_pair( ".ttml+xml", "application/ttml+xml") );
multimap->insert( std::make_pair( ".tve-trigger", "application/tve-trigger") );
multimap->insert( std::make_pair( ".tzif", "application/tzif") );
multimap->insert( std::make_pair( ".tzif-leap", "application/tzif-leap") );
multimap->insert( std::make_pair( ".ulpfec", "application/ulpfec") );
multimap->insert( std::make_pair( ".urc-grpsheet+xml", "application/urc-grpsheet+xml") );
multimap->insert( std::make_pair( ".urc-ressheet+xml", "application/urc-ressheet+xml") );
multimap->insert( std::make_pair( ".urc-targetdesc+xml", "application/urc-targetdesc+xml") );
multimap->insert( std::make_pair( ".urc-uisocketdesc+xml", "application/urc-uisocketdesc+xml") );
multimap->insert( std::make_pair( ".vcard+json", "application/vcard+json") );
multimap->insert( std::make_pair( ".vcard+xml", "application/vcard+xml") );
multimap->insert( std::make_pair( ".vemmi", "application/vemmi") );
multimap->insert( std::make_pair( ".vnd.1000minds.decision-model+xml", "application/vnd.1000minds.decision-model+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.5gnas", "application/vnd.3gpp.5gnas") );
multimap->insert( std::make_pair( ".vnd.3gpp.access-transfer-events+xml", "application/vnd.3gpp.access-transfer-events+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.bsf+xml", "application/vnd.3gpp.bsf+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.GMOP+xml", "application/vnd.3gpp.GMOP+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.gtpc", "application/vnd.3gpp.gtpc") );
multimap->insert( std::make_pair( ".vnd.3gpp.interworking-data", "application/vnd.3gpp.interworking-data") );
multimap->insert( std::make_pair( ".vnd.3gpp.lpp", "application/vnd.3gpp.lpp") );
multimap->insert( std::make_pair( ".vnd.3gpp.mc-signalling-ear", "application/vnd.3gpp.mc-signalling-ear") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-affiliation-command+xml", "application/vnd.3gpp.mcdata-affiliation-command+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-info+xml", "application/vnd.3gpp.mcdata-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-msgstore-ctrl-request+xml", "application/vnd.3gpp.mcdata-msgstore-ctrl-request+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-payload", "application/vnd.3gpp.mcdata-payload") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-regroup+xml", "application/vnd.3gpp.mcdata-regroup+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-service-config+xml", "application/vnd.3gpp.mcdata-service-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-signalling", "application/vnd.3gpp.mcdata-signalling") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-ue-config+xml", "application/vnd.3gpp.mcdata-ue-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcdata-user-profile+xml", "application/vnd.3gpp.mcdata-user-profile+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-affiliation-command+xml", "application/vnd.3gpp.mcptt-affiliation-command+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-floor-request+xml", "application/vnd.3gpp.mcptt-floor-request+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-info+xml", "application/vnd.3gpp.mcptt-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-location-info+xml", "application/vnd.3gpp.mcptt-location-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-mbms-usage-info+xml", "application/vnd.3gpp.mcptt-mbms-usage-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-service-config+xml", "application/vnd.3gpp.mcptt-service-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-signed+xml", "application/vnd.3gpp.mcptt-signed+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-ue-config+xml", "application/vnd.3gpp.mcptt-ue-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-ue-init-config+xml", "application/vnd.3gpp.mcptt-ue-init-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcptt-user-profile+xml", "application/vnd.3gpp.mcptt-user-profile+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-affiliation-command+xml", "application/vnd.3gpp.mcvideo-affiliation-command+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-affiliation-info+xml (OBSOLETED in favor of application/vnd.3gpp.mcvideo-info+xml)", "application/vnd.3gpp.mcvideo-affiliation-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-info+xml", "application/vnd.3gpp.mcvideo-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-location-info+xml", "application/vnd.3gpp.mcvideo-location-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-mbms-usage-info+xml", "application/vnd.3gpp.mcvideo-mbms-usage-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-service-config+xml", "application/vnd.3gpp.mcvideo-service-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-transmission-request+xml", "application/vnd.3gpp.mcvideo-transmission-request+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-ue-config+xml", "application/vnd.3gpp.mcvideo-ue-config+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mcvideo-user-profile+xml", "application/vnd.3gpp.mcvideo-user-profile+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.mid-call+xml", "application/vnd.3gpp.mid-call+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.ngap", "application/vnd.3gpp.ngap") );
multimap->insert( std::make_pair( ".vnd.3gpp.pfcp", "application/vnd.3gpp.pfcp") );
multimap->insert( std::make_pair( ".vnd.3gpp.pic-bw-large", "application/vnd.3gpp.pic-bw-large") );
multimap->insert( std::make_pair( ".vnd.3gpp.pic-bw-small", "application/vnd.3gpp.pic-bw-small") );
multimap->insert( std::make_pair( ".vnd.3gpp.pic-bw-var", "application/vnd.3gpp.pic-bw-var") );
multimap->insert( std::make_pair( ".vnd.3gpp-prose-pc3a+xml", "application/vnd.3gpp-prose-pc3a+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp-prose-pc3ach+xml", "application/vnd.3gpp-prose-pc3ach+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp-prose-pc3ch+xml", "application/vnd.3gpp-prose-pc3ch+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp-prose-pc8+xml", "application/vnd.3gpp-prose-pc8+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp-prose+xml", "application/vnd.3gpp-prose+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.s1ap", "application/vnd.3gpp.s1ap") );
multimap->insert( std::make_pair( ".vnd.3gpp.sms", "application/vnd.3gpp.sms") );
multimap->insert( std::make_pair( ".vnd.3gpp.sms+xml", "application/vnd.3gpp.sms+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.srvcc-ext+xml", "application/vnd.3gpp.srvcc-ext+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.SRVCC-info+xml", "application/vnd.3gpp.SRVCC-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.state-and-event-info+xml", "application/vnd.3gpp.state-and-event-info+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp.ussd+xml", "application/vnd.3gpp.ussd+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp-v2x-local-service-information", "application/vnd.3gpp-v2x-local-service-information") );
multimap->insert( std::make_pair( ".vnd.3gpp2.bcmcsinfo+xml", "application/vnd.3gpp2.bcmcsinfo+xml") );
multimap->insert( std::make_pair( ".vnd.3gpp2.sms", "application/vnd.3gpp2.sms") );
multimap->insert( std::make_pair( ".vnd.3gpp2.tcap", "application/vnd.3gpp2.tcap") );
multimap->insert( std::make_pair( ".vnd.3lightssoftware.imagescal", "application/vnd.3lightssoftware.imagescal") );
multimap->insert( std::make_pair( ".vnd.3M.Post-it-Notes", "application/vnd.3M.Post-it-Notes") );
multimap->insert( std::make_pair( ".vnd.accpac.simply.aso", "application/vnd.accpac.simply.aso") );
multimap->insert( std::make_pair( ".vnd.accpac.simply.imp", "application/vnd.accpac.simply.imp") );
multimap->insert( std::make_pair( ".vnd.acucobol", "application/vnd.acucobol") );
multimap->insert( std::make_pair( ".vnd.acucorp", "application/vnd.acucorp") );
multimap->insert( std::make_pair( ".vnd.adobe.flash.movie", "application/vnd.adobe.flash.movie") );
multimap->insert( std::make_pair( ".vnd.adobe.formscentral.fcdt", "application/vnd.adobe.formscentral.fcdt") );
multimap->insert( std::make_pair( ".vnd.adobe.fxp", "application/vnd.adobe.fxp") );
multimap->insert( std::make_pair( ".vnd.adobe.partial-upload", "application/vnd.adobe.partial-upload") );
multimap->insert( std::make_pair( ".vnd.adobe.xdp+xml", "application/vnd.adobe.xdp+xml") );
multimap->insert( std::make_pair( ".vnd.aether.imp", "application/vnd.aether.imp") );
multimap->insert( std::make_pair( ".vnd.afpc.afplinedata", "application/vnd.afpc.afplinedata") );
multimap->insert( std::make_pair( ".vnd.afpc.afplinedata-pagedef", "application/vnd.afpc.afplinedata-pagedef") );
multimap->insert( std::make_pair( ".vnd.afpc.cmoca-cmresource", "application/vnd.afpc.cmoca-cmresource") );
multimap->insert( std::make_pair( ".vnd.afpc.foca-charset", "application/vnd.afpc.foca-charset") );
multimap->insert( std::make_pair( ".vnd.afpc.foca-codedfont", "application/vnd.afpc.foca-codedfont") );
multimap->insert( std::make_pair( ".vnd.afpc.foca-codepage", "application/vnd.afpc.foca-codepage") );
multimap->insert( std::make_pair( ".vnd.afpc.modca", "application/vnd.afpc.modca") );
multimap->insert( std::make_pair( ".vnd.afpc.modca-cmtable", "application/vnd.afpc.modca-cmtable") );
multimap->insert( std::make_pair( ".vnd.afpc.modca-formdef", "application/vnd.afpc.modca-formdef") );
multimap->insert( std::make_pair( ".vnd.afpc.modca-mediummap", "application/vnd.afpc.modca-mediummap") );
multimap->insert( std::make_pair( ".vnd.afpc.modca-objectcontainer", "application/vnd.afpc.modca-objectcontainer") );
multimap->insert( std::make_pair( ".vnd.afpc.modca-overlay", "application/vnd.afpc.modca-overlay") );
multimap->insert( std::make_pair( ".vnd.afpc.modca-pagesegment", "application/vnd.afpc.modca-pagesegment") );
multimap->insert( std::make_pair( ".vnd.age", "application/vnd.age") );
multimap->insert( std::make_pair( ".vnd.ah-barcode", "application/vnd.ah-barcode") );
multimap->insert( std::make_pair( ".vnd.ahead.space", "application/vnd.ahead.space") );
multimap->insert( std::make_pair( ".vnd.airzip.filesecure.azf", "application/vnd.airzip.filesecure.azf") );
multimap->insert( std::make_pair( ".vnd.airzip.filesecure.azs", "application/vnd.airzip.filesecure.azs") );
multimap->insert( std::make_pair( ".vnd.amadeus+json", "application/vnd.amadeus+json") );
multimap->insert( std::make_pair( ".vnd.amazon.mobi8-ebook", "application/vnd.amazon.mobi8-ebook") );
multimap->insert( std::make_pair( ".vnd.americandynamics.acc", "application/vnd.americandynamics.acc") );
multimap->insert( std::make_pair( ".vnd.amiga.ami", "application/vnd.amiga.ami") );
multimap->insert( std::make_pair( ".vnd.amundsen.maze+xml", "application/vnd.amundsen.maze+xml") );
multimap->insert( std::make_pair( ".vnd.android.ota", "application/vnd.android.ota") );
multimap->insert( std::make_pair( ".vnd.anki", "application/vnd.anki") );
multimap->insert( std::make_pair( ".vnd.anser-web-certificate-issue-initiation", "application/vnd.anser-web-certificate-issue-initiation") );
multimap->insert( std::make_pair( ".vnd.antix.game-component", "application/vnd.antix.game-component") );
multimap->insert( std::make_pair( ".vnd.apache.arrow.file", "application/vnd.apache.arrow.file") );
multimap->insert( std::make_pair( ".vnd.apache.arrow.stream", "application/vnd.apache.arrow.stream") );
multimap->insert( std::make_pair( ".vnd.apache.thrift.binary", "application/vnd.apache.thrift.binary") );
multimap->insert( std::make_pair( ".vnd.apache.thrift.compact", "application/vnd.apache.thrift.compact") );
multimap->insert( std::make_pair( ".vnd.apache.thrift.json", "application/vnd.apache.thrift.json") );
multimap->insert( std::make_pair( ".vnd.apexlang", "application/vnd.apexlang") );
multimap->insert( std::make_pair( ".vnd.api+json", "application/vnd.api+json") );
multimap->insert( std::make_pair( ".vnd.aplextor.warrp+json", "application/vnd.aplextor.warrp+json") );
multimap->insert( std::make_pair( ".vnd.apothekende.reservation+json", "application/vnd.apothekende.reservation+json") );
multimap->insert( std::make_pair( ".vnd.apple.installer+xml", "application/vnd.apple.installer+xml") );
multimap->insert( std::make_pair( ".vnd.apple.keynote", "application/vnd.apple.keynote") );
multimap->insert( std::make_pair( ".vnd.apple.mpegurl", "application/vnd.apple.mpegurl") );
multimap->insert( std::make_pair( ".vnd.apple.numbers", "application/vnd.apple.numbers") );
multimap->insert( std::make_pair( ".vnd.apple.pages", "application/vnd.apple.pages") );
multimap->insert( std::make_pair( ".vnd.arastra.swi (OBSOLETED in favor of application/vnd.aristanetworks.swi)", "application/vnd.arastra.swi") );
multimap->insert( std::make_pair( ".vnd.aristanetworks.swi", "application/vnd.aristanetworks.swi") );
multimap->insert( std::make_pair( ".vnd.artisan+json", "application/vnd.artisan+json") );
multimap->insert( std::make_pair( ".vnd.artsquare", "application/vnd.artsquare") );
multimap->insert( std::make_pair( ".vnd.astraea-software.iota", "application/vnd.astraea-software.iota") );
multimap->insert( std::make_pair( ".vnd.audiograph", "application/vnd.audiograph") );
multimap->insert( std::make_pair( ".vnd.autopackage", "application/vnd.autopackage") );
multimap->insert( std::make_pair( ".vnd.avalon+json", "application/vnd.avalon+json") );
multimap->insert( std::make_pair( ".vnd.avistar+xml", "application/vnd.avistar+xml") );
multimap->insert( std::make_pair( ".vnd.balsamiq.bmml+xml", "application/vnd.balsamiq.bmml+xml") );
multimap->insert( std::make_pair( ".vnd.banana-accounting", "application/vnd.banana-accounting") );
multimap->insert( std::make_pair( ".vnd.bbf.usp.error", "application/vnd.bbf.usp.error") );
multimap->insert( std::make_pair( ".vnd.bbf.usp.msg", "application/vnd.bbf.usp.msg") );
multimap->insert( std::make_pair( ".vnd.bbf.usp.msg+json", "application/vnd.bbf.usp.msg+json") );
multimap->insert( std::make_pair( ".vnd.balsamiq.bmpr", "application/vnd.balsamiq.bmpr") );
multimap->insert( std::make_pair( ".vnd.bekitzur-stech+json", "application/vnd.bekitzur-stech+json") );
multimap->insert( std::make_pair( ".vnd.belightsoft.lhzd+zip", "application/vnd.belightsoft.lhzd+zip") );
multimap->insert( std::make_pair( ".vnd.belightsoft.lhzl+zip", "application/vnd.belightsoft.lhzl+zip") );
multimap->insert( std::make_pair( ".vnd.bint.med-content", "application/vnd.bint.med-content") );
multimap->insert( std::make_pair( ".vnd.biopax.rdf+xml", "application/vnd.biopax.rdf+xml") );
multimap->insert( std::make_pair( ".vnd.blink-idb-value-wrapper", "application/vnd.blink-idb-value-wrapper") );
multimap->insert( std::make_pair( ".vnd.blueice.multipass", "application/vnd.blueice.multipass") );
multimap->insert( std::make_pair( ".vnd.bluetooth.ep.oob", "application/vnd.bluetooth.ep.oob") );
multimap->insert( std::make_pair( ".vnd.bluetooth.le.oob", "application/vnd.bluetooth.le.oob") );
multimap->insert( std::make_pair( ".vnd.bmi", "application/vnd.bmi") );
multimap->insert( std::make_pair( ".vnd.bpf", "application/vnd.bpf") );
multimap->insert( std::make_pair( ".vnd.bpf3", "application/vnd.bpf3") );
multimap->insert( std::make_pair( ".vnd.businessobjects", "application/vnd.businessobjects") );
multimap->insert( std::make_pair( ".vnd.byu.uapi+json", "application/vnd.byu.uapi+json") );
multimap->insert( std::make_pair( ".vnd.cab-jscript", "application/vnd.cab-jscript") );
multimap->insert( std::make_pair( ".vnd.canon-cpdl", "application/vnd.canon-cpdl") );
multimap->insert( std::make_pair( ".vnd.canon-lips", "application/vnd.canon-lips") );
multimap->insert( std::make_pair( ".vnd.capasystems-pg+json", "application/vnd.capasystems-pg+json") );
multimap->insert( std::make_pair( ".vnd.cendio.thinlinc.clientconf", "application/vnd.cendio.thinlinc.clientconf") );
multimap->insert( std::make_pair( ".vnd.century-systems.tcp_stream", "application/vnd.century-systems.tcp_stream") );
multimap->insert( std::make_pair( ".vnd.chemdraw+xml", "application/vnd.chemdraw+xml") );
multimap->insert( std::make_pair( ".vnd.chess-pgn", "application/vnd.chess-pgn") );
multimap->insert( std::make_pair( ".vnd.chipnuts.karaoke-mmd", "application/vnd.chipnuts.karaoke-mmd") );
multimap->insert( std::make_pair( ".vnd.ciedi", "application/vnd.ciedi") );
multimap->insert( std::make_pair( ".vnd.cinderella", "application/vnd.cinderella") );
multimap->insert( std::make_pair( ".vnd.cirpack.isdn-ext", "application/vnd.cirpack.isdn-ext") );
multimap->insert( std::make_pair( ".vnd.citationstyles.style+xml", "application/vnd.citationstyles.style+xml") );
multimap->insert( std::make_pair( ".vnd.claymore", "application/vnd.claymore") );
multimap->insert( std::make_pair( ".vnd.cloanto.rp9", "application/vnd.cloanto.rp9") );
multimap->insert( std::make_pair( ".vnd.clonk.c4group", "application/vnd.clonk.c4group") );
multimap->insert( std::make_pair( ".vnd.cluetrust.cartomobile-config", "application/vnd.cluetrust.cartomobile-config") );
multimap->insert( std::make_pair( ".vnd.cluetrust.cartomobile-config-pkg", "application/vnd.cluetrust.cartomobile-config-pkg") );
multimap->insert( std::make_pair( ".vnd.cncf.helm.chart.content.v1.tar+gzip", "application/vnd.cncf.helm.chart.content.v1.tar+gzip") );
multimap->insert( std::make_pair( ".vnd.coffeescript", "application/vnd.coffeescript") );
multimap->insert( std::make_pair( ".vnd.collabio.xodocuments.document", "application/vnd.collabio.xodocuments.document") );
multimap->insert( std::make_pair( ".vnd.collabio.xodocuments.document-template", "application/vnd.collabio.xodocuments.document-template") );
multimap->insert( std::make_pair( ".vnd.collabio.xodocuments.presentation", "application/vnd.collabio.xodocuments.presentation") );
multimap->insert( std::make_pair( ".vnd.collabio.xodocuments.presentation-template", "application/vnd.collabio.xodocuments.presentation-template") );
multimap->insert( std::make_pair( ".vnd.collabio.xodocuments.spreadsheet", "application/vnd.collabio.xodocuments.spreadsheet") );
multimap->insert( std::make_pair( ".vnd.collabio.xodocuments.spreadsheet-template", "application/vnd.collabio.xodocuments.spreadsheet-template") );
multimap->insert( std::make_pair( ".vnd.collection.doc+json", "application/vnd.collection.doc+json") );
multimap->insert( std::make_pair( ".vnd.collection+json", "application/vnd.collection+json") );
multimap->insert( std::make_pair( ".vnd.collection.next+json", "application/vnd.collection.next+json") );
multimap->insert( std::make_pair( ".vnd.comicbook-rar", "application/vnd.comicbook-rar") );
multimap->insert( std::make_pair( ".vnd.comicbook+zip", "application/vnd.comicbook+zip") );
multimap->insert( std::make_pair( ".vnd.commerce-battelle", "application/vnd.commerce-battelle") );
multimap->insert( std::make_pair( ".vnd.commonspace", "application/vnd.commonspace") );
multimap->insert( std::make_pair( ".vnd.coreos.ignition+json", "application/vnd.coreos.ignition+json") );
multimap->insert( std::make_pair( ".vnd.cosmocaller", "application/vnd.cosmocaller") );
multimap->insert( std::make_pair( ".vnd.contact.cmsg", "application/vnd.contact.cmsg") );
multimap->insert( std::make_pair( ".vnd.crick.clicker", "application/vnd.crick.clicker") );
multimap->insert( std::make_pair( ".vnd.crick.clicker.keyboard", "application/vnd.crick.clicker.keyboard") );
multimap->insert( std::make_pair( ".vnd.crick.clicker.palette", "application/vnd.crick.clicker.palette") );
multimap->insert( std::make_pair( ".vnd.crick.clicker.template", "application/vnd.crick.clicker.template") );
multimap->insert( std::make_pair( ".vnd.crick.clicker.wordbank", "application/vnd.crick.clicker.wordbank") );
multimap->insert( std::make_pair( ".vnd.criticaltools.wbs+xml", "application/vnd.criticaltools.wbs+xml") );
multimap->insert( std::make_pair( ".vnd.cryptii.pipe+json", "application/vnd.cryptii.pipe+json") );
multimap->insert( std::make_pair( ".vnd.crypto-shade-file", "application/vnd.crypto-shade-file") );
multimap->insert( std::make_pair( ".vnd.cryptomator.encrypted", "application/vnd.cryptomator.encrypted") );
multimap->insert( std::make_pair( ".vnd.cryptomator.vault", "application/vnd.cryptomator.vault") );
multimap->insert( std::make_pair( ".vnd.ctc-posml", "application/vnd.ctc-posml") );
multimap->insert( std::make_pair( ".vnd.ctct.ws+xml", "application/vnd.ctct.ws+xml") );
multimap->insert( std::make_pair( ".vnd.cups-pdf", "application/vnd.cups-pdf") );
multimap->insert( std::make_pair( ".vnd.cups-postscript", "application/vnd.cups-postscript") );
multimap->insert( std::make_pair( ".vnd.cups-ppd", "application/vnd.cups-ppd") );
multimap->insert( std::make_pair( ".vnd.cups-raster", "application/vnd.cups-raster") );
multimap->insert( std::make_pair( ".vnd.cups-raw", "application/vnd.cups-raw") );
multimap->insert( std::make_pair( ".vnd.curl", "application/vnd.curl") );
multimap->insert( std::make_pair( ".vnd.cyan.dean.root+xml", "application/vnd.cyan.dean.root+xml") );
multimap->insert( std::make_pair( ".vnd.cybank", "application/vnd.cybank") );
multimap->insert( std::make_pair( ".vnd.cyclonedx+json", "application/vnd.cyclonedx+json") );
multimap->insert( std::make_pair( ".vnd.cyclonedx+xml", "application/vnd.cyclonedx+xml") );
multimap->insert( std::make_pair( ".vnd.d2l.coursepackage1p0+zip", "application/vnd.d2l.coursepackage1p0+zip") );
multimap->insert( std::make_pair( ".vnd.d3m-dataset", "application/vnd.d3m-dataset") );
multimap->insert( std::make_pair( ".vnd.d3m-problem", "application/vnd.d3m-problem") );
multimap->insert( std::make_pair( ".vnd.dart", "application/vnd.dart") );
multimap->insert( std::make_pair( ".vnd.data-vision.rdz", "application/vnd.data-vision.rdz") );
multimap->insert( std::make_pair( ".vnd.datalog", "application/vnd.datalog") );
multimap->insert( std::make_pair( ".vnd.datapackage+json", "application/vnd.datapackage+json") );
multimap->insert( std::make_pair( ".vnd.dataresource+json", "application/vnd.dataresource+json") );
multimap->insert( std::make_pair( ".vnd.dbf", "application/vnd.dbf") );
multimap->insert( std::make_pair( ".vnd.debian.binary-package", "application/vnd.debian.binary-package") );
multimap->insert( std::make_pair( ".vnd.dece.data", "application/vnd.dece.data") );
multimap->insert( std::make_pair( ".vnd.dece.ttml+xml", "application/vnd.dece.ttml+xml") );
multimap->insert( std::make_pair( ".vnd.dece.unspecified", "application/vnd.dece.unspecified") );
multimap->insert( std::make_pair( ".vnd.dece.zip", "application/vnd.dece.zip") );
multimap->insert( std::make_pair( ".vnd.denovo.fcselayout-link", "application/vnd.denovo.fcselayout-link") );
multimap->insert( std::make_pair( ".vnd.desmume.movie", "application/vnd.desmume.movie") );
multimap->insert( std::make_pair( ".vnd.dir-bi.plate-dl-nosuffix", "application/vnd.dir-bi.plate-dl-nosuffix") );
multimap->insert( std::make_pair( ".vnd.dm.delegation+xml", "application/vnd.dm.delegation+xml") );
multimap->insert( std::make_pair( ".vnd.dna", "application/vnd.dna") );
multimap->insert( std::make_pair( ".vnd.document+json", "application/vnd.document+json") );
multimap->insert( std::make_pair( ".vnd.dolby.mobile.1", "application/vnd.dolby.mobile.1") );
multimap->insert( std::make_pair( ".vnd.dolby.mobile.2", "application/vnd.dolby.mobile.2") );
multimap->insert( std::make_pair( ".vnd.doremir.scorecloud-binary-document", "application/vnd.doremir.scorecloud-binary-document") );
multimap->insert( std::make_pair( ".vnd.dpgraph", "application/vnd.dpgraph") );
multimap->insert( std::make_pair( ".vnd.dreamfactory", "application/vnd.dreamfactory") );
multimap->insert( std::make_pair( ".vnd.drive+json", "application/vnd.drive+json") );
multimap->insert( std::make_pair( ".vnd.dtg.local", "application/vnd.dtg.local") );
multimap->insert( std::make_pair( ".vnd.dtg.local.flash", "application/vnd.dtg.local.flash") );
multimap->insert( std::make_pair( ".vnd.dtg.local.html", "application/vnd.dtg.local.html") );
multimap->insert( std::make_pair( ".vnd.dvb.ait", "application/vnd.dvb.ait") );
multimap->insert( std::make_pair( ".vnd.dvb.dvbisl+xml", "application/vnd.dvb.dvbisl+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.dvbj", "application/vnd.dvb.dvbj") );
multimap->insert( std::make_pair( ".vnd.dvb.esgcontainer", "application/vnd.dvb.esgcontainer") );
multimap->insert( std::make_pair( ".vnd.dvb.ipdcdftnotifaccess", "application/vnd.dvb.ipdcdftnotifaccess") );
multimap->insert( std::make_pair( ".vnd.dvb.ipdcesgaccess", "application/vnd.dvb.ipdcesgaccess") );
multimap->insert( std::make_pair( ".vnd.dvb.ipdcesgaccess2", "application/vnd.dvb.ipdcesgaccess2") );
multimap->insert( std::make_pair( ".vnd.dvb.ipdcesgpdd", "application/vnd.dvb.ipdcesgpdd") );
multimap->insert( std::make_pair( ".vnd.dvb.ipdcroaming", "application/vnd.dvb.ipdcroaming") );
multimap->insert( std::make_pair( ".vnd.dvb.iptv.alfec-base", "application/vnd.dvb.iptv.alfec-base") );
multimap->insert( std::make_pair( ".vnd.dvb.iptv.alfec-enhancement", "application/vnd.dvb.iptv.alfec-enhancement") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-aggregate-root+xml", "application/vnd.dvb.notif-aggregate-root+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-container+xml", "application/vnd.dvb.notif-container+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-generic+xml", "application/vnd.dvb.notif-generic+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-ia-msglist+xml", "application/vnd.dvb.notif-ia-msglist+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-ia-registration-request+xml", "application/vnd.dvb.notif-ia-registration-request+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-ia-registration-response+xml", "application/vnd.dvb.notif-ia-registration-response+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.notif-init+xml", "application/vnd.dvb.notif-init+xml") );
multimap->insert( std::make_pair( ".vnd.dvb.pfr", "application/vnd.dvb.pfr") );
multimap->insert( std::make_pair( ".vnd.dvb.service", "application/vnd.dvb.service") );
multimap->insert( std::make_pair( ".vnd.dxr", "application/vnd.dxr") );
multimap->insert( std::make_pair( ".vnd.dynageo", "application/vnd.dynageo") );
multimap->insert( std::make_pair( ".vnd.dzr", "application/vnd.dzr") );
multimap->insert( std::make_pair( ".vnd.easykaraoke.cdgdownload", "application/vnd.easykaraoke.cdgdownload") );
multimap->insert( std::make_pair( ".vnd.ecip.rlp", "application/vnd.ecip.rlp") );
multimap->insert( std::make_pair( ".vnd.ecdis-update", "application/vnd.ecdis-update") );
multimap->insert( std::make_pair( ".vnd.eclipse.ditto+json", "application/vnd.eclipse.ditto+json") );
multimap->insert( std::make_pair( ".vnd.ecowin.chart", "application/vnd.ecowin.chart") );
multimap->insert( std::make_pair( ".vnd.ecowin.filerequest", "application/vnd.ecowin.filerequest") );
multimap->insert( std::make_pair( ".vnd.ecowin.fileupdate", "application/vnd.ecowin.fileupdate") );
multimap->insert( std::make_pair( ".vnd.ecowin.series", "application/vnd.ecowin.series") );
multimap->insert( std::make_pair( ".vnd.ecowin.seriesrequest", "application/vnd.ecowin.seriesrequest") );
multimap->insert( std::make_pair( ".vnd.ecowin.seriesupdate", "application/vnd.ecowin.seriesupdate") );
multimap->insert( std::make_pair( ".vnd.efi.img", "application/vnd.efi.img") );
multimap->insert( std::make_pair( ".vnd.efi.iso", "application/vnd.efi.iso") );
multimap->insert( std::make_pair( ".vnd.emclient.accessrequest+xml", "application/vnd.emclient.accessrequest+xml") );
multimap->insert( std::make_pair( ".vnd.enliven", "application/vnd.enliven") );
multimap->insert( std::make_pair( ".vnd.enphase.envoy", "application/vnd.enphase.envoy") );
multimap->insert( std::make_pair( ".vnd.eprints.data+xml", "application/vnd.eprints.data+xml") );
multimap->insert( std::make_pair( ".vnd.epson.esf", "application/vnd.epson.esf") );
multimap->insert( std::make_pair( ".vnd.epson.msf", "application/vnd.epson.msf") );
multimap->insert( std::make_pair( ".vnd.epson.quickanime", "application/vnd.epson.quickanime") );
multimap->insert( std::make_pair( ".vnd.epson.salt", "application/vnd.epson.salt") );
multimap->insert( std::make_pair( ".vnd.epson.ssf", "application/vnd.epson.ssf") );
multimap->insert( std::make_pair( ".vnd.ericsson.quickcall", "application/vnd.ericsson.quickcall") );
multimap->insert( std::make_pair( ".vnd.espass-espass+zip", "application/vnd.espass-espass+zip") );
multimap->insert( std::make_pair( ".vnd.eszigno3+xml", "application/vnd.eszigno3+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.aoc+xml", "application/vnd.etsi.aoc+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.asic-s+zip", "application/vnd.etsi.asic-s+zip") );
multimap->insert( std::make_pair( ".vnd.etsi.asic-e+zip", "application/vnd.etsi.asic-e+zip") );
multimap->insert( std::make_pair( ".vnd.etsi.cug+xml", "application/vnd.etsi.cug+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvcommand+xml", "application/vnd.etsi.iptvcommand+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvdiscovery+xml", "application/vnd.etsi.iptvdiscovery+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvprofile+xml", "application/vnd.etsi.iptvprofile+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvsad-bc+xml", "application/vnd.etsi.iptvsad-bc+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvsad-cod+xml", "application/vnd.etsi.iptvsad-cod+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvsad-npvr+xml", "application/vnd.etsi.iptvsad-npvr+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvservice+xml", "application/vnd.etsi.iptvservice+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvsync+xml", "application/vnd.etsi.iptvsync+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.iptvueprofile+xml", "application/vnd.etsi.iptvueprofile+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.mcid+xml", "application/vnd.etsi.mcid+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.mheg5", "application/vnd.etsi.mheg5") );
multimap->insert( std::make_pair( ".vnd.etsi.overload-control-policy-dataset+xml", "application/vnd.etsi.overload-control-policy-dataset+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.pstn+xml", "application/vnd.etsi.pstn+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.sci+xml", "application/vnd.etsi.sci+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.simservs+xml", "application/vnd.etsi.simservs+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.timestamp-token", "application/vnd.etsi.timestamp-token") );
multimap->insert( std::make_pair( ".vnd.etsi.tsl+xml", "application/vnd.etsi.tsl+xml") );
multimap->insert( std::make_pair( ".vnd.etsi.tsl.der", "application/vnd.etsi.tsl.der") );
multimap->insert( std::make_pair( ".vnd.eu.kasparian.car+json", "application/vnd.eu.kasparian.car+json") );
multimap->insert( std::make_pair( ".vnd.eudora.data", "application/vnd.eudora.data") );
multimap->insert( std::make_pair( ".vnd.evolv.ecig.profile", "application/vnd.evolv.ecig.profile") );
multimap->insert( std::make_pair( ".vnd.evolv.ecig.settings", "application/vnd.evolv.ecig.settings") );
multimap->insert( std::make_pair( ".vnd.evolv.ecig.theme", "application/vnd.evolv.ecig.theme") );
multimap->insert( std::make_pair( ".vnd.exstream-empower+zip", "application/vnd.exstream-empower+zip") );
multimap->insert( std::make_pair( ".vnd.exstream-package", "application/vnd.exstream-package") );
multimap->insert( std::make_pair( ".vnd.ezpix-album", "application/vnd.ezpix-album") );
multimap->insert( std::make_pair( ".vnd.ezpix-package", "application/vnd.ezpix-package") );
multimap->insert( std::make_pair( ".vnd.f-secure.mobile", "application/vnd.f-secure.mobile") );
multimap->insert( std::make_pair( ".vnd.fastcopy-disk-image", "application/vnd.fastcopy-disk-image") );
multimap->insert( std::make_pair( ".vnd.familysearch.gedcom+zip", "application/vnd.familysearch.gedcom+zip") );
multimap->insert( std::make_pair( ".vnd.fdsn.mseed", "application/vnd.fdsn.mseed") );
multimap->insert( std::make_pair( ".vnd.fdsn.seed", "application/vnd.fdsn.seed") );
multimap->insert( std::make_pair( ".vnd.ffsns", "application/vnd.ffsns") );
multimap->insert( std::make_pair( ".vnd.ficlab.flb+zip", "application/vnd.ficlab.flb+zip") );
multimap->insert( std::make_pair( ".vnd.filmit.zfc", "application/vnd.filmit.zfc") );
multimap->insert( std::make_pair( ".vnd.fints", "application/vnd.fints") );
multimap->insert( std::make_pair( ".vnd.firemonkeys.cloudcell", "application/vnd.firemonkeys.cloudcell") );
multimap->insert( std::make_pair( ".vnd.FloGraphIt", "application/vnd.FloGraphIt") );
multimap->insert( std::make_pair( ".vnd.fluxtime.clip", "application/vnd.fluxtime.clip") );
multimap->insert( std::make_pair( ".vnd.font-fontforge-sfd", "application/vnd.font-fontforge-sfd") );
multimap->insert( std::make_pair( ".vnd.framemaker", "application/vnd.framemaker") );
multimap->insert( std::make_pair( ".vnd.frogans.fnc (OBSOLETE)", "application/vnd.frogans.fnc") );
multimap->insert( std::make_pair( ".vnd.frogans.ltf (OBSOLETE)", "application/vnd.frogans.ltf") );
multimap->insert( std::make_pair( ".vnd.fsc.weblaunch", "application/vnd.fsc.weblaunch") );
multimap->insert( std::make_pair( ".vnd.fujifilm.fb.docuworks", "application/vnd.fujifilm.fb.docuworks") );
multimap->insert( std::make_pair( ".vnd.fujifilm.fb.docuworks.binder", "application/vnd.fujifilm.fb.docuworks.binder") );
multimap->insert( std::make_pair( ".vnd.fujifilm.fb.docuworks.container", "application/vnd.fujifilm.fb.docuworks.container") );
multimap->insert( std::make_pair( ".vnd.fujifilm.fb.jfi+xml", "application/vnd.fujifilm.fb.jfi+xml") );
multimap->insert( std::make_pair( ".vnd.fujitsu.oasys", "application/vnd.fujitsu.oasys") );
multimap->insert( std::make_pair( ".vnd.fujitsu.oasys2", "application/vnd.fujitsu.oasys2") );
multimap->insert( std::make_pair( ".vnd.fujitsu.oasys3", "application/vnd.fujitsu.oasys3") );
multimap->insert( std::make_pair( ".vnd.fujitsu.oasysgp", "application/vnd.fujitsu.oasysgp") );
multimap->insert( std::make_pair( ".vnd.fujitsu.oasysprs", "application/vnd.fujitsu.oasysprs") );
multimap->insert( std::make_pair( ".vnd.fujixerox.ART4", "application/vnd.fujixerox.ART4") );
multimap->insert( std::make_pair( ".vnd.fujixerox.ART-EX", "application/vnd.fujixerox.ART-EX") );
multimap->insert( std::make_pair( ".vnd.fujixerox.ddd", "application/vnd.fujixerox.ddd") );
multimap->insert( std::make_pair( ".vnd.fujixerox.docuworks", "application/vnd.fujixerox.docuworks") );
multimap->insert( std::make_pair( ".vnd.fujixerox.docuworks.binder", "application/vnd.fujixerox.docuworks.binder") );
multimap->insert( std::make_pair( ".vnd.fujixerox.docuworks.container", "application/vnd.fujixerox.docuworks.container") );
multimap->insert( std::make_pair( ".vnd.fujixerox.HBPL", "application/vnd.fujixerox.HBPL") );
multimap->insert( std::make_pair( ".vnd.fut-misnet", "application/vnd.fut-misnet") );
multimap->insert( std::make_pair( ".vnd.futoin+cbor", "application/vnd.futoin+cbor") );
multimap->insert( std::make_pair( ".vnd.futoin+json", "application/vnd.futoin+json") );
multimap->insert( std::make_pair( ".vnd.fuzzysheet", "application/vnd.fuzzysheet") );
multimap->insert( std::make_pair( ".vnd.genomatix.tuxedo", "application/vnd.genomatix.tuxedo") );
multimap->insert( std::make_pair( ".vnd.genozip", "application/vnd.genozip") );
multimap->insert( std::make_pair( ".vnd.gentics.grd+json", "application/vnd.gentics.grd+json") );
multimap->insert( std::make_pair( ".vnd.geo+json (OBSOLETED by [RFC7946] in favor of application/geo+json)", "application/vnd.geo+json") );
multimap->insert( std::make_pair( ".vnd.geocube+xml (OBSOLETED by request)", "application/vnd.geocube+xml") );
multimap->insert( std::make_pair( ".vnd.geogebra.file", "application/vnd.geogebra.file") );
multimap->insert( std::make_pair( ".vnd.geogebra.slides", "application/vnd.geogebra.slides") );
multimap->insert( std::make_pair( ".vnd.geogebra.tool", "application/vnd.geogebra.tool") );
multimap->insert( std::make_pair( ".vnd.geometry-explorer", "application/vnd.geometry-explorer") );
multimap->insert( std::make_pair( ".vnd.geonext", "application/vnd.geonext") );
multimap->insert( std::make_pair( ".vnd.geoplan", "application/vnd.geoplan") );
multimap->insert( std::make_pair( ".vnd.geospace", "application/vnd.geospace") );
multimap->insert( std::make_pair( ".vnd.gerber", "application/vnd.gerber") );
multimap->insert( std::make_pair( ".vnd.globalplatform.card-content-mgt", "application/vnd.globalplatform.card-content-mgt") );
multimap->insert( std::make_pair( ".vnd.globalplatform.card-content-mgt-response", "application/vnd.globalplatform.card-content-mgt-response") );
multimap->insert( std::make_pair( ".vnd.gmx - DEPRECATED", "application/vnd.gmx") );
multimap->insert( std::make_pair( ".vnd.gnu.taler.exchange+json", "application/vnd.gnu.taler.exchange+json") );
multimap->insert( std::make_pair( ".vnd.gnu.taler.merchant+json", "application/vnd.gnu.taler.merchant+json") );
multimap->insert( std::make_pair( ".vnd.google-earth.kml+xml", "application/vnd.google-earth.kml+xml") );
multimap->insert( std::make_pair( ".vnd.google-earth.kmz", "application/vnd.google-earth.kmz") );
multimap->insert( std::make_pair( ".vnd.gov.sk.e-form+xml", "application/vnd.gov.sk.e-form+xml") );
multimap->insert( std::make_pair( ".vnd.gov.sk.e-form+zip", "application/vnd.gov.sk.e-form+zip") );
multimap->insert( std::make_pair( ".vnd.gov.sk.xmldatacontainer+xml", "application/vnd.gov.sk.xmldatacontainer+xml") );
multimap->insert( std::make_pair( ".vnd.grafeq", "application/vnd.grafeq") );
multimap->insert( std::make_pair( ".vnd.gridmp", "application/vnd.gridmp") );
multimap->insert( std::make_pair( ".vnd.groove-account", "application/vnd.groove-account") );
multimap->insert( std::make_pair( ".vnd.groove-help", "application/vnd.groove-help") );
multimap->insert( std::make_pair( ".vnd.groove-identity-message", "application/vnd.groove-identity-message") );
multimap->insert( std::make_pair( ".vnd.groove-injector", "application/vnd.groove-injector") );
multimap->insert( std::make_pair( ".vnd.groove-tool-message", "application/vnd.groove-tool-message") );
multimap->insert( std::make_pair( ".vnd.groove-tool-template", "application/vnd.groove-tool-template") );
multimap->insert( std::make_pair( ".vnd.groove-vcard", "application/vnd.groove-vcard") );
multimap->insert( std::make_pair( ".vnd.hal+json", "application/vnd.hal+json") );
multimap->insert( std::make_pair( ".vnd.hal+xml", "application/vnd.hal+xml") );
multimap->insert( std::make_pair( ".vnd.HandHeld-Entertainment+xml", "application/vnd.HandHeld-Entertainment+xml") );
multimap->insert( std::make_pair( ".vnd.hbci", "application/vnd.hbci") );
multimap->insert( std::make_pair( ".vnd.hc+json", "application/vnd.hc+json") );
multimap->insert( std::make_pair( ".vnd.hcl-bireports", "application/vnd.hcl-bireports") );
multimap->insert( std::make_pair( ".vnd.hdt", "application/vnd.hdt") );
multimap->insert( std::make_pair( ".vnd.heroku+json", "application/vnd.heroku+json") );
multimap->insert( std::make_pair( ".vnd.hhe.lesson-player", "application/vnd.hhe.lesson-player") );
multimap->insert( std::make_pair( ".vnd.hp-HPGL", "application/vnd.hp-HPGL") );
multimap->insert( std::make_pair( ".vnd.hp-hpid", "application/vnd.hp-hpid") );
multimap->insert( std::make_pair( ".vnd.hp-hps", "application/vnd.hp-hps") );
multimap->insert( std::make_pair( ".vnd.hp-jlyt", "application/vnd.hp-jlyt") );
multimap->insert( std::make_pair( ".vnd.hp-PCL", "application/vnd.hp-PCL") );
multimap->insert( std::make_pair( ".vnd.hp-PCLXL", "application/vnd.hp-PCLXL") );
multimap->insert( std::make_pair( ".vnd.httphone", "application/vnd.httphone") );
multimap->insert( std::make_pair( ".vnd.hydrostatix.sof-data", "application/vnd.hydrostatix.sof-data") );
multimap->insert( std::make_pair( ".vnd.hyper-item+json", "application/vnd.hyper-item+json") );
multimap->insert( std::make_pair( ".vnd.hyper+json", "application/vnd.hyper+json") );
multimap->insert( std::make_pair( ".vnd.hyperdrive+json", "application/vnd.hyperdrive+json") );
multimap->insert( std::make_pair( ".vnd.hzn-3d-crossword", "application/vnd.hzn-3d-crossword") );
multimap->insert( std::make_pair( ".vnd.ibm.afplinedata (OBSOLETED in favor of vnd.afpc.afplinedata)", "application/vnd.ibm.afplinedata") );
multimap->insert( std::make_pair( ".vnd.ibm.electronic-media", "application/vnd.ibm.electronic-media") );
multimap->insert( std::make_pair( ".vnd.ibm.MiniPay", "application/vnd.ibm.MiniPay") );
multimap->insert( std::make_pair( ".vnd.ibm.modcap (OBSOLETED in favor of application/vnd.afpc.modca)", "application/vnd.ibm.modcap") );
multimap->insert( std::make_pair( ".vnd.ibm.rights-management", "application/vnd.ibm.rights-management") );
multimap->insert( std::make_pair( ".vnd.ibm.secure-container", "application/vnd.ibm.secure-container") );
multimap->insert( std::make_pair( ".vnd.iccprofile", "application/vnd.iccprofile") );
multimap->insert( std::make_pair( ".vnd.ieee.1905", "application/vnd.ieee.1905") );
multimap->insert( std::make_pair( ".vnd.igloader", "application/vnd.igloader") );
multimap->insert( std::make_pair( ".vnd.imagemeter.folder+zip", "application/vnd.imagemeter.folder+zip") );
multimap->insert( std::make_pair( ".vnd.imagemeter.image+zip", "application/vnd.imagemeter.image+zip") );
multimap->insert( std::make_pair( ".vnd.immervision-ivp", "application/vnd.immervision-ivp") );
multimap->insert( std::make_pair( ".vnd.immervision-ivu", "application/vnd.immervision-ivu") );
multimap->insert( std::make_pair( ".vnd.ims.imsccv1p1", "application/vnd.ims.imsccv1p1") );
multimap->insert( std::make_pair( ".vnd.ims.imsccv1p2", "application/vnd.ims.imsccv1p2") );
multimap->insert( std::make_pair( ".vnd.ims.imsccv1p3", "application/vnd.ims.imsccv1p3") );
multimap->insert( std::make_pair( ".vnd.ims.lis.v2.result+json", "application/vnd.ims.lis.v2.result+json") );
multimap->insert( std::make_pair( ".vnd.ims.lti.v2.toolconsumerprofile+json", "application/vnd.ims.lti.v2.toolconsumerprofile+json") );
multimap->insert( std::make_pair( ".vnd.ims.lti.v2.toolproxy.id+json", "application/vnd.ims.lti.v2.toolproxy.id+json") );
multimap->insert( std::make_pair( ".vnd.ims.lti.v2.toolproxy+json", "application/vnd.ims.lti.v2.toolproxy+json") );
multimap->insert( std::make_pair( ".vnd.ims.lti.v2.toolsettings+json", "application/vnd.ims.lti.v2.toolsettings+json") );
multimap->insert( std::make_pair( ".vnd.ims.lti.v2.toolsettings.simple+json", "application/vnd.ims.lti.v2.toolsettings.simple+json") );
multimap->insert( std::make_pair( ".vnd.informedcontrol.rms+xml", "application/vnd.informedcontrol.rms+xml") );
multimap->insert( std::make_pair( ".vnd.infotech.project", "application/vnd.infotech.project") );
multimap->insert( std::make_pair( ".vnd.infotech.project+xml", "application/vnd.infotech.project+xml") );
multimap->insert( std::make_pair( ".vnd.informix-visionary (OBSOLETED in favor of application/vnd.visionary)", "application/vnd.informix-visionary") );
multimap->insert( std::make_pair( ".vnd.innopath.wamp.notification", "application/vnd.innopath.wamp.notification") );
multimap->insert( std::make_pair( ".vnd.insors.igm", "application/vnd.insors.igm") );
multimap->insert( std::make_pair( ".vnd.intercon.formnet", "application/vnd.intercon.formnet") );
multimap->insert( std::make_pair( ".vnd.intergeo", "application/vnd.intergeo") );
multimap->insert( std::make_pair( ".vnd.intertrust.digibox", "application/vnd.intertrust.digibox") );
multimap->insert( std::make_pair( ".vnd.intertrust.nncp", "application/vnd.intertrust.nncp") );
multimap->insert( std::make_pair( ".vnd.intu.qbo", "application/vnd.intu.qbo") );
multimap->insert( std::make_pair( ".vnd.intu.qfx", "application/vnd.intu.qfx") );
multimap->insert( std::make_pair( ".vnd.ipld.car", "application/vnd.ipld.car") );
multimap->insert( std::make_pair( ".vnd.ipld.raw", "application/vnd.ipld.raw") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.catalogitem+xml", "application/vnd.iptc.g2.catalogitem+xml") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.conceptitem+xml", "application/vnd.iptc.g2.conceptitem+xml") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.knowledgeitem+xml", "application/vnd.iptc.g2.knowledgeitem+xml") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.newsitem+xml", "application/vnd.iptc.g2.newsitem+xml") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.newsmessage+xml", "application/vnd.iptc.g2.newsmessage+xml") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.packageitem+xml", "application/vnd.iptc.g2.packageitem+xml") );
multimap->insert( std::make_pair( ".vnd.iptc.g2.planningitem+xml", "application/vnd.iptc.g2.planningitem+xml") );
multimap->insert( std::make_pair( ".vnd.ipunplugged.rcprofile", "application/vnd.ipunplugged.rcprofile") );
multimap->insert( std::make_pair( ".vnd.irepository.package+xml", "application/vnd.irepository.package+xml") );
multimap->insert( std::make_pair( ".vnd.is-xpr", "application/vnd.is-xpr") );
multimap->insert( std::make_pair( ".vnd.isac.fcs", "application/vnd.isac.fcs") );
multimap->insert( std::make_pair( ".vnd.jam", "application/vnd.jam") );
multimap->insert( std::make_pair( ".vnd.iso11783-10+zip", "application/vnd.iso11783-10+zip") );
multimap->insert( std::make_pair( ".vnd.japannet-directory-service", "application/vnd.japannet-directory-service") );
multimap->insert( std::make_pair( ".vnd.japannet-jpnstore-wakeup", "application/vnd.japannet-jpnstore-wakeup") );
multimap->insert( std::make_pair( ".vnd.japannet-payment-wakeup", "application/vnd.japannet-payment-wakeup") );
multimap->insert( std::make_pair( ".vnd.japannet-registration", "application/vnd.japannet-registration") );
multimap->insert( std::make_pair( ".vnd.japannet-registration-wakeup", "application/vnd.japannet-registration-wakeup") );
multimap->insert( std::make_pair( ".vnd.japannet-setstore-wakeup", "application/vnd.japannet-setstore-wakeup") );
multimap->insert( std::make_pair( ".vnd.japannet-verification", "application/vnd.japannet-verification") );
multimap->insert( std::make_pair( ".vnd.japannet-verification-wakeup", "application/vnd.japannet-verification-wakeup") );
multimap->insert( std::make_pair( ".vnd.jcp.javame.midlet-rms", "application/vnd.jcp.javame.midlet-rms") );
multimap->insert( std::make_pair( ".vnd.jisp", "application/vnd.jisp") );
multimap->insert( std::make_pair( ".vnd.joost.joda-archive", "application/vnd.joost.joda-archive") );
multimap->insert( std::make_pair( ".vnd.jsk.isdn-ngn", "application/vnd.jsk.isdn-ngn") );
multimap->insert( std::make_pair( ".vnd.kahootz", "application/vnd.kahootz") );
multimap->insert( std::make_pair( ".vnd.kde.karbon", "application/vnd.kde.karbon") );
multimap->insert( std::make_pair( ".vnd.kde.kchart", "application/vnd.kde.kchart") );
multimap->insert( std::make_pair( ".vnd.kde.kformula", "application/vnd.kde.kformula") );
multimap->insert( std::make_pair( ".vnd.kde.kivio", "application/vnd.kde.kivio") );
multimap->insert( std::make_pair( ".vnd.kde.kontour", "application/vnd.kde.kontour") );
multimap->insert( std::make_pair( ".vnd.kde.kpresenter", "application/vnd.kde.kpresenter") );
multimap->insert( std::make_pair( ".vnd.kde.kspread", "application/vnd.kde.kspread") );
multimap->insert( std::make_pair( ".vnd.kde.kword", "application/vnd.kde.kword") );
multimap->insert( std::make_pair( ".vnd.kenameaapp", "application/vnd.kenameaapp") );
multimap->insert( std::make_pair( ".vnd.kidspiration", "application/vnd.kidspiration") );
multimap->insert( std::make_pair( ".vnd.Kinar", "application/vnd.Kinar") );
multimap->insert( std::make_pair( ".vnd.koan", "application/vnd.koan") );
multimap->insert( std::make_pair( ".vnd.kodak-descriptor", "application/vnd.kodak-descriptor") );
multimap->insert( std::make_pair( ".vnd.las", "application/vnd.las") );
multimap->insert( std::make_pair( ".vnd.las.las+json", "application/vnd.las.las+json") );
multimap->insert( std::make_pair( ".vnd.las.las+xml", "application/vnd.las.las+xml") );
multimap->insert( std::make_pair( ".vnd.laszip", "application/vnd.laszip") );
multimap->insert( std::make_pair( ".vnd.leap+json", "application/vnd.leap+json") );
multimap->insert( std::make_pair( ".vnd.liberty-request+xml", "application/vnd.liberty-request+xml") );
multimap->insert( std::make_pair( ".vnd.llamagraphics.life-balance.desktop", "application/vnd.llamagraphics.life-balance.desktop") );
multimap->insert( std::make_pair( ".vnd.llamagraphics.life-balance.exchange+xml", "application/vnd.llamagraphics.life-balance.exchange+xml") );
multimap->insert( std::make_pair( ".vnd.logipipe.circuit+zip", "application/vnd.logipipe.circuit+zip") );
multimap->insert( std::make_pair( ".vnd.loom", "application/vnd.loom") );
multimap->insert( std::make_pair( ".vnd.lotus-1-2-3", "application/vnd.lotus-1-2-3") );
multimap->insert( std::make_pair( ".vnd.lotus-approach", "application/vnd.lotus-approach") );
multimap->insert( std::make_pair( ".vnd.lotus-freelance", "application/vnd.lotus-freelance") );
multimap->insert( std::make_pair( ".vnd.lotus-notes", "application/vnd.lotus-notes") );
multimap->insert( std::make_pair( ".vnd.lotus-organizer", "application/vnd.lotus-organizer") );
multimap->insert( std::make_pair( ".vnd.lotus-screencam", "application/vnd.lotus-screencam") );
multimap->insert( std::make_pair( ".vnd.lotus-wordpro", "application/vnd.lotus-wordpro") );
multimap->insert( std::make_pair( ".vnd.macports.portpkg", "application/vnd.macports.portpkg") );
multimap->insert( std::make_pair( ".vnd.mapbox-vector-tile", "application/vnd.mapbox-vector-tile") );
multimap->insert( std::make_pair( ".vnd.marlin.drm.actiontoken+xml", "application/vnd.marlin.drm.actiontoken+xml") );
multimap->insert( std::make_pair( ".vnd.marlin.drm.conftoken+xml", "application/vnd.marlin.drm.conftoken+xml") );
multimap->insert( std::make_pair( ".vnd.marlin.drm.license+xml", "application/vnd.marlin.drm.license+xml") );
multimap->insert( std::make_pair( ".vnd.marlin.drm.mdcf", "application/vnd.marlin.drm.mdcf") );
multimap->insert( std::make_pair( ".vnd.mason+json", "application/vnd.mason+json") );
multimap->insert( std::make_pair( ".vnd.maxar.archive.3tz+zip", "application/vnd.maxar.archive.3tz+zip") );
multimap->insert( std::make_pair( ".vnd.maxmind.maxmind-db", "application/vnd.maxmind.maxmind-db") );
multimap->insert( std::make_pair( ".vnd.mcd", "application/vnd.mcd") );
multimap->insert( std::make_pair( ".vnd.medcalcdata", "application/vnd.medcalcdata") );
multimap->insert( std::make_pair( ".vnd.mediastation.cdkey", "application/vnd.mediastation.cdkey") );
multimap->insert( std::make_pair( ".vnd.meridian-slingshot", "application/vnd.meridian-slingshot") );
multimap->insert( std::make_pair( ".vnd.MFER", "application/vnd.MFER") );
multimap->insert( std::make_pair( ".vnd.mfmp", "application/vnd.mfmp") );
multimap->insert( std::make_pair( ".vnd.micro+json", "application/vnd.micro+json") );
multimap->insert( std::make_pair( ".vnd.micrografx.flo", "application/vnd.micrografx.flo") );
multimap->insert( std::make_pair( ".vnd.micrografx.igx", "application/vnd.micrografx.igx") );
multimap->insert( std::make_pair( ".vnd.microsoft.portable-executable", "application/vnd.microsoft.portable-executable") );
multimap->insert( std::make_pair( ".vnd.microsoft.windows.thumbnail-cache", "application/vnd.microsoft.windows.thumbnail-cache") );
multimap->insert( std::make_pair( ".vnd.miele+json", "application/vnd.miele+json") );
multimap->insert( std::make_pair( ".vnd.mif", "application/vnd.mif") );
multimap->insert( std::make_pair( ".vnd.minisoft-hp3000-save", "application/vnd.minisoft-hp3000-save") );
multimap->insert( std::make_pair( ".vnd.mitsubishi.misty-guard.trustweb", "application/vnd.mitsubishi.misty-guard.trustweb") );
multimap->insert( std::make_pair( ".vnd.Mobius.DAF", "application/vnd.Mobius.DAF") );
multimap->insert( std::make_pair( ".vnd.Mobius.DIS", "application/vnd.Mobius.DIS") );
multimap->insert( std::make_pair( ".vnd.Mobius.MBK", "application/vnd.Mobius.MBK") );
multimap->insert( std::make_pair( ".vnd.Mobius.MQY", "application/vnd.Mobius.MQY") );
multimap->insert( std::make_pair( ".vnd.Mobius.MSL", "application/vnd.Mobius.MSL") );
multimap->insert( std::make_pair( ".vnd.Mobius.PLC", "application/vnd.Mobius.PLC") );
multimap->insert( std::make_pair( ".vnd.Mobius.TXF", "application/vnd.Mobius.TXF") );
multimap->insert( std::make_pair( ".vnd.mophun.application", "application/vnd.mophun.application") );
multimap->insert( std::make_pair( ".vnd.mophun.certificate", "application/vnd.mophun.certificate") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite", "application/vnd.motorola.flexsuite") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite.adsi", "application/vnd.motorola.flexsuite.adsi") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite.fis", "application/vnd.motorola.flexsuite.fis") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite.gotap", "application/vnd.motorola.flexsuite.gotap") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite.kmr", "application/vnd.motorola.flexsuite.kmr") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite.ttc", "application/vnd.motorola.flexsuite.ttc") );
multimap->insert( std::make_pair( ".vnd.motorola.flexsuite.wem", "application/vnd.motorola.flexsuite.wem") );
multimap->insert( std::make_pair( ".vnd.motorola.iprm", "application/vnd.motorola.iprm") );
multimap->insert( std::make_pair( ".vnd.mozilla.xul+xml", "application/vnd.mozilla.xul+xml") );
multimap->insert( std::make_pair( ".vnd.ms-artgalry", "application/vnd.ms-artgalry") );
multimap->insert( std::make_pair( ".vnd.ms-asf", "application/vnd.ms-asf") );
multimap->insert( std::make_pair( ".vnd.ms-cab-compressed", "application/vnd.ms-cab-compressed") );
multimap->insert( std::make_pair( ".vnd.ms-3mfdocument", "application/vnd.ms-3mfdocument") );
multimap->insert( std::make_pair( ".vnd.ms-excel", "application/vnd.ms-excel") );
multimap->insert( std::make_pair( ".vnd.ms-excel.addin.macroEnabled.12", "application/vnd.ms-excel.addin.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-excel.sheet.binary.macroEnabled.12", "application/vnd.ms-excel.sheet.binary.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-excel.sheet.macroEnabled.12", "application/vnd.ms-excel.sheet.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-excel.template.macroEnabled.12", "application/vnd.ms-excel.template.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-fontobject", "application/vnd.ms-fontobject") );
multimap->insert( std::make_pair( ".vnd.ms-htmlhelp", "application/vnd.ms-htmlhelp") );
multimap->insert( std::make_pair( ".vnd.ms-ims", "application/vnd.ms-ims") );
multimap->insert( std::make_pair( ".vnd.ms-lrm", "application/vnd.ms-lrm") );
multimap->insert( std::make_pair( ".vnd.ms-office.activeX+xml", "application/vnd.ms-office.activeX+xml") );
multimap->insert( std::make_pair( ".vnd.ms-officetheme", "application/vnd.ms-officetheme") );
multimap->insert( std::make_pair( ".vnd.ms-playready.initiator+xml", "application/vnd.ms-playready.initiator+xml") );
multimap->insert( std::make_pair( ".vnd.ms-powerpoint", "application/vnd.ms-powerpoint") );
multimap->insert( std::make_pair( ".vnd.ms-powerpoint.addin.macroEnabled.12", "application/vnd.ms-powerpoint.addin.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-powerpoint.presentation.macroEnabled.12", "application/vnd.ms-powerpoint.presentation.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-powerpoint.slide.macroEnabled.12", "application/vnd.ms-powerpoint.slide.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-powerpoint.slideshow.macroEnabled.12", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-powerpoint.template.macroEnabled.12", "application/vnd.ms-powerpoint.template.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-PrintDeviceCapabilities+xml", "application/vnd.ms-PrintDeviceCapabilities+xml") );
multimap->insert( std::make_pair( ".vnd.ms-PrintSchemaTicket+xml", "application/vnd.ms-PrintSchemaTicket+xml") );
multimap->insert( std::make_pair( ".vnd.ms-project", "application/vnd.ms-project") );
multimap->insert( std::make_pair( ".vnd.ms-tnef", "application/vnd.ms-tnef") );
multimap->insert( std::make_pair( ".vnd.ms-windows.devicepairing", "application/vnd.ms-windows.devicepairing") );
multimap->insert( std::make_pair( ".vnd.ms-windows.nwprinting.oob", "application/vnd.ms-windows.nwprinting.oob") );
multimap->insert( std::make_pair( ".vnd.ms-windows.printerpairing", "application/vnd.ms-windows.printerpairing") );
multimap->insert( std::make_pair( ".vnd.ms-windows.wsd.oob", "application/vnd.ms-windows.wsd.oob") );
multimap->insert( std::make_pair( ".vnd.ms-wmdrm.lic-chlg-req", "application/vnd.ms-wmdrm.lic-chlg-req") );
multimap->insert( std::make_pair( ".vnd.ms-wmdrm.lic-resp", "application/vnd.ms-wmdrm.lic-resp") );
multimap->insert( std::make_pair( ".vnd.ms-wmdrm.meter-chlg-req", "application/vnd.ms-wmdrm.meter-chlg-req") );
multimap->insert( std::make_pair( ".vnd.ms-wmdrm.meter-resp", "application/vnd.ms-wmdrm.meter-resp") );
multimap->insert( std::make_pair( ".vnd.ms-word.document.macroEnabled.12", "application/vnd.ms-word.document.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-word.template.macroEnabled.12", "application/vnd.ms-word.template.macroEnabled.12") );
multimap->insert( std::make_pair( ".vnd.ms-works", "application/vnd.ms-works") );
multimap->insert( std::make_pair( ".vnd.ms-wpl", "application/vnd.ms-wpl") );
multimap->insert( std::make_pair( ".vnd.ms-xpsdocument", "application/vnd.ms-xpsdocument") );
multimap->insert( std::make_pair( ".vnd.msa-disk-image", "application/vnd.msa-disk-image") );
multimap->insert( std::make_pair( ".vnd.mseq", "application/vnd.mseq") );
multimap->insert( std::make_pair( ".vnd.msign", "application/vnd.msign") );
multimap->insert( std::make_pair( ".vnd.multiad.creator", "application/vnd.multiad.creator") );
multimap->insert( std::make_pair( ".vnd.multiad.creator.cif", "application/vnd.multiad.creator.cif") );
multimap->insert( std::make_pair( ".vnd.musician", "application/vnd.musician") );
multimap->insert( std::make_pair( ".vnd.music-niff", "application/vnd.music-niff") );
multimap->insert( std::make_pair( ".vnd.muvee.style", "application/vnd.muvee.style") );
multimap->insert( std::make_pair( ".vnd.mynfc", "application/vnd.mynfc") );
multimap->insert( std::make_pair( ".vnd.nacamar.ybrid+json", "application/vnd.nacamar.ybrid+json") );
multimap->insert( std::make_pair( ".vnd.ncd.control", "application/vnd.ncd.control") );
multimap->insert( std::make_pair( ".vnd.ncd.reference", "application/vnd.ncd.reference") );
multimap->insert( std::make_pair( ".vnd.nearst.inv+json", "application/vnd.nearst.inv+json") );
multimap->insert( std::make_pair( ".vnd.nebumind.line", "application/vnd.nebumind.line") );
multimap->insert( std::make_pair( ".vnd.nervana", "application/vnd.nervana") );
multimap->insert( std::make_pair( ".vnd.netfpx", "application/vnd.netfpx") );
multimap->insert( std::make_pair( ".vnd.neurolanguage.nlu", "application/vnd.neurolanguage.nlu") );
multimap->insert( std::make_pair( ".vnd.nimn", "application/vnd.nimn") );
multimap->insert( std::make_pair( ".vnd.nintendo.snes.rom", "application/vnd.nintendo.snes.rom") );
multimap->insert( std::make_pair( ".vnd.nintendo.nitro.rom", "application/vnd.nintendo.nitro.rom") );
multimap->insert( std::make_pair( ".vnd.nitf", "application/vnd.nitf") );
multimap->insert( std::make_pair( ".vnd.noblenet-directory", "application/vnd.noblenet-directory") );
multimap->insert( std::make_pair( ".vnd.noblenet-sealer", "application/vnd.noblenet-sealer") );
multimap->insert( std::make_pair( ".vnd.noblenet-web", "application/vnd.noblenet-web") );
multimap->insert( std::make_pair( ".vnd.nokia.catalogs", "application/vnd.nokia.catalogs") );
multimap->insert( std::make_pair( ".vnd.nokia.conml+wbxml", "application/vnd.nokia.conml+wbxml") );
multimap->insert( std::make_pair( ".vnd.nokia.conml+xml", "application/vnd.nokia.conml+xml") );
multimap->insert( std::make_pair( ".vnd.nokia.iptv.config+xml", "application/vnd.nokia.iptv.config+xml") );
multimap->insert( std::make_pair( ".vnd.nokia.iSDS-radio-presets", "application/vnd.nokia.iSDS-radio-presets") );
multimap->insert( std::make_pair( ".vnd.nokia.landmark+wbxml", "application/vnd.nokia.landmark+wbxml") );
multimap->insert( std::make_pair( ".vnd.nokia.landmark+xml", "application/vnd.nokia.landmark+xml") );
multimap->insert( std::make_pair( ".vnd.nokia.landmarkcollection+xml", "application/vnd.nokia.landmarkcollection+xml") );
multimap->insert( std::make_pair( ".vnd.nokia.ncd", "application/vnd.nokia.ncd") );
multimap->insert( std::make_pair( ".vnd.nokia.n-gage.ac+xml", "application/vnd.nokia.n-gage.ac+xml") );
multimap->insert( std::make_pair( ".vnd.nokia.n-gage.data", "application/vnd.nokia.n-gage.data") );
multimap->insert( std::make_pair( ".vnd.nokia.n-gage.symbian.install (OBSOLETE; no replacement given)", "application/vnd.nokia.n-gage.symbian.install") );
multimap->insert( std::make_pair( ".vnd.nokia.pcd+wbxml", "application/vnd.nokia.pcd+wbxml") );
multimap->insert( std::make_pair( ".vnd.nokia.pcd+xml", "application/vnd.nokia.pcd+xml") );
multimap->insert( std::make_pair( ".vnd.nokia.radio-preset", "application/vnd.nokia.radio-preset") );
multimap->insert( std::make_pair( ".vnd.nokia.radio-presets", "application/vnd.nokia.radio-presets") );
multimap->insert( std::make_pair( ".vnd.novadigm.EDM", "application/vnd.novadigm.EDM") );
multimap->insert( std::make_pair( ".vnd.novadigm.EDX", "application/vnd.novadigm.EDX") );
multimap->insert( std::make_pair( ".vnd.novadigm.EXT", "application/vnd.novadigm.EXT") );
multimap->insert( std::make_pair( ".vnd.ntt-local.content-share", "application/vnd.ntt-local.content-share") );
multimap->insert( std::make_pair( ".vnd.ntt-local.file-transfer", "application/vnd.ntt-local.file-transfer") );
multimap->insert( std::make_pair( ".vnd.ntt-local.ogw_remote-access", "application/vnd.ntt-local.ogw_remote-access") );
multimap->insert( std::make_pair( ".vnd.ntt-local.sip-ta_remote", "application/vnd.ntt-local.sip-ta_remote") );
multimap->insert( std::make_pair( ".vnd.ntt-local.sip-ta_tcp_stream", "application/vnd.ntt-local.sip-ta_tcp_stream") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.base", "application/vnd.oasis.opendocument.base") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.chart", "application/vnd.oasis.opendocument.chart") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.chart-template", "application/vnd.oasis.opendocument.chart-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.database (OBSOLETED in favor of application/vnd.oasis.opendocument.base)", "application/vnd.oasis.opendocument.database") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.formula", "application/vnd.oasis.opendocument.formula") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.formula-template", "application/vnd.oasis.opendocument.formula-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.graphics", "application/vnd.oasis.opendocument.graphics") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.graphics-template", "application/vnd.oasis.opendocument.graphics-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.image", "application/vnd.oasis.opendocument.image") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.image-template", "application/vnd.oasis.opendocument.image-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.presentation", "application/vnd.oasis.opendocument.presentation") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.presentation-template", "application/vnd.oasis.opendocument.presentation-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.spreadsheet", "application/vnd.oasis.opendocument.spreadsheet") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.spreadsheet-template", "application/vnd.oasis.opendocument.spreadsheet-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.text", "application/vnd.oasis.opendocument.text") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.text-master", "application/vnd.oasis.opendocument.text-master") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.text-template", "application/vnd.oasis.opendocument.text-template") );
multimap->insert( std::make_pair( ".vnd.oasis.opendocument.text-web", "application/vnd.oasis.opendocument.text-web") );
multimap->insert( std::make_pair( ".vnd.obn", "application/vnd.obn") );
multimap->insert( std::make_pair( ".vnd.ocf+cbor", "application/vnd.ocf+cbor") );
multimap->insert( std::make_pair( ".vnd.oci.image.manifest.v1+json", "application/vnd.oci.image.manifest.v1+json") );
multimap->insert( std::make_pair( ".vnd.oftn.l10n+json", "application/vnd.oftn.l10n+json") );
multimap->insert( std::make_pair( ".vnd.oipf.contentaccessdownload+xml", "application/vnd.oipf.contentaccessdownload+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.contentaccessstreaming+xml", "application/vnd.oipf.contentaccessstreaming+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.cspg-hexbinary", "application/vnd.oipf.cspg-hexbinary") );
multimap->insert( std::make_pair( ".vnd.oipf.dae.svg+xml", "application/vnd.oipf.dae.svg+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.dae.xhtml+xml", "application/vnd.oipf.dae.xhtml+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.mippvcontrolmessage+xml", "application/vnd.oipf.mippvcontrolmessage+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.pae.gem", "application/vnd.oipf.pae.gem") );
multimap->insert( std::make_pair( ".vnd.oipf.spdiscovery+xml", "application/vnd.oipf.spdiscovery+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.spdlist+xml", "application/vnd.oipf.spdlist+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.ueprofile+xml", "application/vnd.oipf.ueprofile+xml") );
multimap->insert( std::make_pair( ".vnd.oipf.userprofile+xml", "application/vnd.oipf.userprofile+xml") );
multimap->insert( std::make_pair( ".vnd.olpc-sugar", "application/vnd.olpc-sugar") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.associated-procedure-parameter+xml", "application/vnd.oma.bcast.associated-procedure-parameter+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.drm-trigger+xml", "application/vnd.oma.bcast.drm-trigger+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.imd+xml", "application/vnd.oma.bcast.imd+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.ltkm", "application/vnd.oma.bcast.ltkm") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.notification+xml", "application/vnd.oma.bcast.notification+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.provisioningtrigger", "application/vnd.oma.bcast.provisioningtrigger") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.sgboot", "application/vnd.oma.bcast.sgboot") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.sgdd+xml", "application/vnd.oma.bcast.sgdd+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.sgdu", "application/vnd.oma.bcast.sgdu") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.simple-symbol-container", "application/vnd.oma.bcast.simple-symbol-container") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.smartcard-trigger+xml", "application/vnd.oma.bcast.smartcard-trigger+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.sprov+xml", "application/vnd.oma.bcast.sprov+xml") );
multimap->insert( std::make_pair( ".vnd.oma.bcast.stkm", "application/vnd.oma.bcast.stkm") );
multimap->insert( std::make_pair( ".vnd.oma.cab-address-book+xml", "application/vnd.oma.cab-address-book+xml") );
multimap->insert( std::make_pair( ".vnd.oma.cab-feature-handler+xml", "application/vnd.oma.cab-feature-handler+xml") );
multimap->insert( std::make_pair( ".vnd.oma.cab-pcc+xml", "application/vnd.oma.cab-pcc+xml") );
multimap->insert( std::make_pair( ".vnd.oma.cab-subs-invite+xml", "application/vnd.oma.cab-subs-invite+xml") );
multimap->insert( std::make_pair( ".vnd.oma.cab-user-prefs+xml", "application/vnd.oma.cab-user-prefs+xml") );
multimap->insert( std::make_pair( ".vnd.oma.dcd", "application/vnd.oma.dcd") );
multimap->insert( std::make_pair( ".vnd.oma.dcdc", "application/vnd.oma.dcdc") );
multimap->insert( std::make_pair( ".vnd.oma.dd2+xml", "application/vnd.oma.dd2+xml") );
multimap->insert( std::make_pair( ".vnd.oma.drm.risd+xml", "application/vnd.oma.drm.risd+xml") );
multimap->insert( std::make_pair( ".vnd.oma.group-usage-list+xml", "application/vnd.oma.group-usage-list+xml") );
multimap->insert( std::make_pair( ".vnd.oma.lwm2m+cbor", "application/vnd.oma.lwm2m+cbor") );
multimap->insert( std::make_pair( ".vnd.oma.lwm2m+json", "application/vnd.oma.lwm2m+json") );
multimap->insert( std::make_pair( ".vnd.oma.lwm2m+tlv", "application/vnd.oma.lwm2m+tlv") );
multimap->insert( std::make_pair( ".vnd.oma.pal+xml", "application/vnd.oma.pal+xml") );
multimap->insert( std::make_pair( ".vnd.oma.poc.detailed-progress-report+xml", "application/vnd.oma.poc.detailed-progress-report+xml") );
multimap->insert( std::make_pair( ".vnd.oma.poc.final-report+xml", "application/vnd.oma.poc.final-report+xml") );
multimap->insert( std::make_pair( ".vnd.oma.poc.groups+xml", "application/vnd.oma.poc.groups+xml") );
multimap->insert( std::make_pair( ".vnd.oma.poc.invocation-descriptor+xml", "application/vnd.oma.poc.invocation-descriptor+xml") );
multimap->insert( std::make_pair( ".vnd.oma.poc.optimized-progress-report+xml", "application/vnd.oma.poc.optimized-progress-report+xml") );
multimap->insert( std::make_pair( ".vnd.oma.push", "application/vnd.oma.push") );
multimap->insert( std::make_pair( ".vnd.oma.scidm.messages+xml", "application/vnd.oma.scidm.messages+xml") );
multimap->insert( std::make_pair( ".vnd.oma.xcap-directory+xml", "application/vnd.oma.xcap-directory+xml") );
multimap->insert( std::make_pair( ".vnd.omads-email+xml", "application/vnd.omads-email+xml") );
multimap->insert( std::make_pair( ".vnd.omads-file+xml", "application/vnd.omads-file+xml") );
multimap->insert( std::make_pair( ".vnd.omads-folder+xml", "application/vnd.omads-folder+xml") );
multimap->insert( std::make_pair( ".vnd.omaloc-supl-init", "application/vnd.omaloc-supl-init") );
multimap->insert( std::make_pair( ".vnd.oma-scws-config", "application/vnd.oma-scws-config") );
multimap->insert( std::make_pair( ".vnd.oma-scws-http-request", "application/vnd.oma-scws-http-request") );
multimap->insert( std::make_pair( ".vnd.oma-scws-http-response", "application/vnd.oma-scws-http-response") );
multimap->insert( std::make_pair( ".vnd.onepager", "application/vnd.onepager") );
multimap->insert( std::make_pair( ".vnd.onepagertamp", "application/vnd.onepagertamp") );
multimap->insert( std::make_pair( ".vnd.onepagertamx", "application/vnd.onepagertamx") );
multimap->insert( std::make_pair( ".vnd.onepagertat", "application/vnd.onepagertat") );
multimap->insert( std::make_pair( ".vnd.onepagertatp", "application/vnd.onepagertatp") );
multimap->insert( std::make_pair( ".vnd.onepagertatx", "application/vnd.onepagertatx") );
multimap->insert( std::make_pair( ".vnd.onvif.metadata", "application/vnd.onvif.metadata") );
multimap->insert( std::make_pair( ".vnd.openblox.game-binary", "application/vnd.openblox.game-binary") );
multimap->insert( std::make_pair( ".vnd.openblox.game+xml", "application/vnd.openblox.game+xml") );
multimap->insert( std::make_pair( ".vnd.openeye.oeb", "application/vnd.openeye.oeb") );
multimap->insert( std::make_pair( ".vnd.openstreetmap->data+xml", "application/vnd.openstreetmap->data+xml") );
multimap->insert( std::make_pair( ".vnd.opentimestamps.ots", "application/vnd.opentimestamps.ots") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.custom-properties+xml", "application/vnd.openxmlformats-officedocument.custom-properties+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.customXmlProperties+xml", "application/vnd.openxmlformats-officedocument.customXmlProperties+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawing+xml", "application/vnd.openxmlformats-officedocument.drawing+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawingml.chart+xml", "application/vnd.openxmlformats-officedocument.drawingml.chart+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawingml.chartshapes+xml", "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawingml.diagramColors+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawingml.diagramData+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.extended-properties+xml", "application/vnd.openxmlformats-officedocument.extended-properties+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.commentAuthors+xml", "application/vnd.openxmlformats-officedocument.presentationml.commentAuthors+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.comments+xml", "application/vnd.openxmlformats-officedocument.presentationml.comments+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.handoutMaster+xml", "application/vnd.openxmlformats-officedocument.presentationml.handoutMaster+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.notesMaster+xml", "application/vnd.openxmlformats-officedocument.presentationml.notesMaster+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.notesSlide+xml", "application/vnd.openxmlformats-officedocument.presentationml.notesSlide+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.openxmlformats-officedocument.presentationml.presentation") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.presentation.main+xml", "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.presProps+xml", "application/vnd.openxmlformats-officedocument.presentationml.presProps+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slide", "application/vnd.openxmlformats-officedocument.presentationml.slide") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slide+xml", "application/vnd.openxmlformats-officedocument.presentationml.slide+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slideLayout+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slideMaster+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slideshow", "application/vnd.openxmlformats-officedocument.presentationml.slideshow") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.tableStyles+xml", "application/vnd.openxmlformats-officedocument.presentationml.tableStyles+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.tags+xml", "application/vnd.openxmlformats-officedocument.presentationml.tags+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.template", "application/vnd.openxmlformats-officedocument.presentationml.template") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.template.main+xml", "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.presentationml.viewProps+xml", "application/vnd.openxmlformats-officedocument.presentationml.viewProps+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.comments+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.connections+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.styles+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.table+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.template", "application/vnd.openxmlformats-officedocument.spreadsheetml.template") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.theme+xml", "application/vnd.openxmlformats-officedocument.theme+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.themeOverride+xml", "application/vnd.openxmlformats-officedocument.themeOverride+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.vmlDrawing", "application/vnd.openxmlformats-officedocument.vmlDrawing") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.comments+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.openxmlformats-officedocument.wordprocessingml.document") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.footer+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.settings+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.styles+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.template", "application/vnd.openxmlformats-officedocument.wordprocessingml.template") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-package.core-properties+xml", "application/vnd.openxmlformats-package.core-properties+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-package.digital-signature-xmlsignature+xml", "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml") );
multimap->insert( std::make_pair( ".vnd.openxmlformats-package.relationships+xml", "application/vnd.openxmlformats-package.relationships+xml") );
multimap->insert( std::make_pair( ".vnd.oracle.resource+json", "application/vnd.oracle.resource+json") );
multimap->insert( std::make_pair( ".vnd.orange.indata", "application/vnd.orange.indata") );
multimap->insert( std::make_pair( ".vnd.osa.netdeploy", "application/vnd.osa.netdeploy") );
multimap->insert( std::make_pair( ".vnd.osgeo.mapguide.package", "application/vnd.osgeo.mapguide.package") );
multimap->insert( std::make_pair( ".vnd.osgi.bundle", "application/vnd.osgi.bundle") );
multimap->insert( std::make_pair( ".vnd.osgi.dp", "application/vnd.osgi.dp") );
multimap->insert( std::make_pair( ".vnd.osgi.subsystem", "application/vnd.osgi.subsystem") );
multimap->insert( std::make_pair( ".vnd.otps.ct-kip+xml", "application/vnd.otps.ct-kip+xml") );
multimap->insert( std::make_pair( ".vnd.oxli.countgraph", "application/vnd.oxli.countgraph") );
multimap->insert( std::make_pair( ".vnd.pagerduty+json", "application/vnd.pagerduty+json") );
multimap->insert( std::make_pair( ".vnd.palm", "application/vnd.palm") );
multimap->insert( std::make_pair( ".vnd.panoply", "application/vnd.panoply") );
multimap->insert( std::make_pair( ".vnd.paos.xml", "application/vnd.paos.xml") );
multimap->insert( std::make_pair( ".vnd.patentdive", "application/vnd.patentdive") );
multimap->insert( std::make_pair( ".vnd.patientecommsdoc", "application/vnd.patientecommsdoc") );
multimap->insert( std::make_pair( ".vnd.pawaafile", "application/vnd.pawaafile") );
multimap->insert( std::make_pair( ".vnd.pcos", "application/vnd.pcos") );
multimap->insert( std::make_pair( ".vnd.pg.format", "application/vnd.pg.format") );
multimap->insert( std::make_pair( ".vnd.pg.osasli", "application/vnd.pg.osasli") );
multimap->insert( std::make_pair( ".vnd.piaccess.application-licence", "application/vnd.piaccess.application-licence") );
multimap->insert( std::make_pair( ".vnd.picsel", "application/vnd.picsel") );
multimap->insert( std::make_pair( ".vnd.pmi.widget", "application/vnd.pmi.widget") );
multimap->insert( std::make_pair( ".vnd.poc.group-advertisement+xml", "application/vnd.poc.group-advertisement+xml") );
multimap->insert( std::make_pair( ".vnd.pocketlearn", "application/vnd.pocketlearn") );
multimap->insert( std::make_pair( ".vnd.powerbuilder6", "application/vnd.powerbuilder6") );
multimap->insert( std::make_pair( ".vnd.powerbuilder6-s", "application/vnd.powerbuilder6-s") );
multimap->insert( std::make_pair( ".vnd.powerbuilder7", "application/vnd.powerbuilder7") );
multimap->insert( std::make_pair( ".vnd.powerbuilder75", "application/vnd.powerbuilder75") );
multimap->insert( std::make_pair( ".vnd.powerbuilder75-s", "application/vnd.powerbuilder75-s") );
multimap->insert( std::make_pair( ".vnd.powerbuilder7-s", "application/vnd.powerbuilder7-s") );
multimap->insert( std::make_pair( ".vnd.preminet", "application/vnd.preminet") );
multimap->insert( std::make_pair( ".vnd.previewsystems.box", "application/vnd.previewsystems.box") );
multimap->insert( std::make_pair( ".vnd.proteus.magazine", "application/vnd.proteus.magazine") );
multimap->insert( std::make_pair( ".vnd.psfs", "application/vnd.psfs") );
multimap->insert( std::make_pair( ".vnd.publishare-delta-tree", "application/vnd.publishare-delta-tree") );
multimap->insert( std::make_pair( ".vnd.pvi.ptid1", "application/vnd.pvi.ptid1") );
multimap->insert( std::make_pair( ".vnd.pwg-multiplexed", "application/vnd.pwg-multiplexed") );
multimap->insert( std::make_pair( ".vnd.pwg-xhtml-print+xml", "application/vnd.pwg-xhtml-print+xml") );
multimap->insert( std::make_pair( ".vnd.qualcomm.brew-app-res", "application/vnd.qualcomm.brew-app-res") );
multimap->insert( std::make_pair( ".vnd.quarantainenet", "application/vnd.quarantainenet") );
multimap->insert( std::make_pair( ".vnd.Quark.QuarkXPress", "application/vnd.Quark.QuarkXPress") );
multimap->insert( std::make_pair( ".vnd.quobject-quoxdocument", "application/vnd.quobject-quoxdocument") );
multimap->insert( std::make_pair( ".vnd.radisys.moml+xml", "application/vnd.radisys.moml+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-audit-conf+xml", "application/vnd.radisys.msml-audit-conf+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-audit-conn+xml", "application/vnd.radisys.msml-audit-conn+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-audit-dialog+xml", "application/vnd.radisys.msml-audit-dialog+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-audit-stream+xml", "application/vnd.radisys.msml-audit-stream+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-audit+xml", "application/vnd.radisys.msml-audit+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-conf+xml", "application/vnd.radisys.msml-conf+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog-base+xml", "application/vnd.radisys.msml-dialog-base+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog-fax-detect+xml", "application/vnd.radisys.msml-dialog-fax-detect+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog-fax-sendrecv+xml", "application/vnd.radisys.msml-dialog-fax-sendrecv+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog-group+xml", "application/vnd.radisys.msml-dialog-group+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog-speech+xml", "application/vnd.radisys.msml-dialog-speech+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog-transform+xml", "application/vnd.radisys.msml-dialog-transform+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-dialog+xml", "application/vnd.radisys.msml-dialog+xml") );
multimap->insert( std::make_pair( ".vnd.radisys.msml+xml", "application/vnd.radisys.msml+xml") );
multimap->insert( std::make_pair( ".vnd.rainstor.data", "application/vnd.rainstor.data") );
multimap->insert( std::make_pair( ".vnd.rapid", "application/vnd.rapid") );
multimap->insert( std::make_pair( ".vnd.rar", "application/vnd.rar") );
multimap->insert( std::make_pair( ".vnd.realvnc.bed", "application/vnd.realvnc.bed") );
multimap->insert( std::make_pair( ".vnd.recordare.musicxml", "application/vnd.recordare.musicxml") );
multimap->insert( std::make_pair( ".vnd.recordare.musicxml+xml", "application/vnd.recordare.musicxml+xml") );
multimap->insert( std::make_pair( ".vnd.RenLearn.rlprint", "application/vnd.RenLearn.rlprint") );
multimap->insert( std::make_pair( ".vnd.resilient.logic", "application/vnd.resilient.logic") );
multimap->insert( std::make_pair( ".vnd.restful+json", "application/vnd.restful+json") );
multimap->insert( std::make_pair( ".vnd.rig.cryptonote", "application/vnd.rig.cryptonote") );
multimap->insert( std::make_pair( ".vnd.route66.link66+xml", "application/vnd.route66.link66+xml") );
multimap->insert( std::make_pair( ".vnd.rs-274x", "application/vnd.rs-274x") );
multimap->insert( std::make_pair( ".vnd.ruckus.download", "application/vnd.ruckus.download") );
multimap->insert( std::make_pair( ".vnd.s3sms", "application/vnd.s3sms") );
multimap->insert( std::make_pair( ".vnd.sailingtracker.track", "application/vnd.sailingtracker.track") );
multimap->insert( std::make_pair( ".vnd.sar", "application/vnd.sar") );
multimap->insert( std::make_pair( ".vnd.sbm.cid", "application/vnd.sbm.cid") );
multimap->insert( std::make_pair( ".vnd.sbm.mid2", "application/vnd.sbm.mid2") );
multimap->insert( std::make_pair( ".vnd.scribus", "application/vnd.scribus") );
multimap->insert( std::make_pair( ".vnd.sealed.3df", "application/vnd.sealed.3df") );
multimap->insert( std::make_pair( ".vnd.sealed.csf", "application/vnd.sealed.csf") );
multimap->insert( std::make_pair( ".vnd.sealed.doc", "application/vnd.sealed.doc") );
multimap->insert( std::make_pair( ".vnd.sealed.eml", "application/vnd.sealed.eml") );
multimap->insert( std::make_pair( ".vnd.sealed.mht", "application/vnd.sealed.mht") );
multimap->insert( std::make_pair( ".vnd.sealed.net", "application/vnd.sealed.net") );
multimap->insert( std::make_pair( ".vnd.sealed.ppt", "application/vnd.sealed.ppt") );
multimap->insert( std::make_pair( ".vnd.sealed.tiff", "application/vnd.sealed.tiff") );
multimap->insert( std::make_pair( ".vnd.sealed.xls", "application/vnd.sealed.xls") );
multimap->insert( std::make_pair( ".vnd.sealedmedia.softseal.html", "application/vnd.sealedmedia.softseal.html") );
multimap->insert( std::make_pair( ".vnd.sealedmedia.softseal.pdf", "application/vnd.sealedmedia.softseal.pdf") );
multimap->insert( std::make_pair( ".vnd.seemail", "application/vnd.seemail") );
multimap->insert( std::make_pair( ".vnd.seis+json", "application/vnd.seis+json") );
multimap->insert( std::make_pair( ".vnd.sema", "application/vnd.sema") );
multimap->insert( std::make_pair( ".vnd.semd", "application/vnd.semd") );
multimap->insert( std::make_pair( ".vnd.semf", "application/vnd.semf") );
multimap->insert( std::make_pair( ".vnd.shade-save-file", "application/vnd.shade-save-file") );
multimap->insert( std::make_pair( ".vnd.shana.informed.formdata", "application/vnd.shana.informed.formdata") );
multimap->insert( std::make_pair( ".vnd.shana.informed.formtemplate", "application/vnd.shana.informed.formtemplate") );
multimap->insert( std::make_pair( ".vnd.shana.informed.interchange", "application/vnd.shana.informed.interchange") );
multimap->insert( std::make_pair( ".vnd.shana.informed.package", "application/vnd.shana.informed.package") );
multimap->insert( std::make_pair( ".vnd.shootproof+json", "application/vnd.shootproof+json") );
multimap->insert( std::make_pair( ".vnd.shopkick+json", "application/vnd.shopkick+json") );
multimap->insert( std::make_pair( ".vnd.shp", "application/vnd.shp") );
multimap->insert( std::make_pair( ".vnd.shx", "application/vnd.shx") );
multimap->insert( std::make_pair( ".vnd.sigrok.session", "application/vnd.sigrok.session") );
multimap->insert( std::make_pair( ".vnd.SimTech-MindMapper", "application/vnd.SimTech-MindMapper") );
multimap->insert( std::make_pair( ".vnd.siren+json", "application/vnd.siren+json") );
multimap->insert( std::make_pair( ".vnd.smaf", "application/vnd.smaf") );
multimap->insert( std::make_pair( ".vnd.smart.notebook", "application/vnd.smart.notebook") );
multimap->insert( std::make_pair( ".vnd.smart.teacher", "application/vnd.smart.teacher") );
multimap->insert( std::make_pair( ".vnd.snesdev-page-table", "application/vnd.snesdev-page-table") );
multimap->insert( std::make_pair( ".vnd.software602.filler.form+xml", "application/vnd.software602.filler.form+xml") );
multimap->insert( std::make_pair( ".vnd.software602.filler.form-xml-zip", "application/vnd.software602.filler.form-xml-zip") );
multimap->insert( std::make_pair( ".vnd.solent.sdkm+xml", "application/vnd.solent.sdkm+xml") );
multimap->insert( std::make_pair( ".vnd.spotfire.dxp", "application/vnd.spotfire.dxp") );
multimap->insert( std::make_pair( ".vnd.spotfire.sfs", "application/vnd.spotfire.sfs") );
multimap->insert( std::make_pair( ".vnd.sqlite3", "application/vnd.sqlite3") );
multimap->insert( std::make_pair( ".vnd.sss-cod", "application/vnd.sss-cod") );
multimap->insert( std::make_pair( ".vnd.sss-dtf", "application/vnd.sss-dtf") );
multimap->insert( std::make_pair( ".vnd.sss-ntf", "application/vnd.sss-ntf") );
multimap->insert( std::make_pair( ".vnd.stepmania.package", "application/vnd.stepmania.package") );
multimap->insert( std::make_pair( ".vnd.stepmania.stepchart", "application/vnd.stepmania.stepchart") );
multimap->insert( std::make_pair( ".vnd.street-stream", "application/vnd.street-stream") );
multimap->insert( std::make_pair( ".vnd.sun.wadl+xml", "application/vnd.sun.wadl+xml") );
multimap->insert( std::make_pair( ".vnd.sus-calendar", "application/vnd.sus-calendar") );
multimap->insert( std::make_pair( ".vnd.svd", "application/vnd.svd") );
multimap->insert( std::make_pair( ".vnd.swiftview-ics", "application/vnd.swiftview-ics") );
multimap->insert( std::make_pair( ".vnd.sybyl.mol2", "application/vnd.sybyl.mol2") );
multimap->insert( std::make_pair( ".vnd.sycle+xml", "application/vnd.sycle+xml") );
multimap->insert( std::make_pair( ".vnd.syft+json", "application/vnd.syft+json") );
multimap->insert( std::make_pair( ".vnd.syncml.dm.notification", "application/vnd.syncml.dm.notification") );
multimap->insert( std::make_pair( ".vnd.syncml.dmddf+xml", "application/vnd.syncml.dmddf+xml") );
multimap->insert( std::make_pair( ".vnd.syncml.dmtnds+wbxml", "application/vnd.syncml.dmtnds+wbxml") );
multimap->insert( std::make_pair( ".vnd.syncml.dmtnds+xml", "application/vnd.syncml.dmtnds+xml") );
multimap->insert( std::make_pair( ".vnd.syncml.dmddf+wbxml", "application/vnd.syncml.dmddf+wbxml") );
multimap->insert( std::make_pair( ".vnd.syncml.dm+wbxml", "application/vnd.syncml.dm+wbxml") );
multimap->insert( std::make_pair( ".vnd.syncml.dm+xml", "application/vnd.syncml.dm+xml") );
multimap->insert( std::make_pair( ".vnd.syncml.ds.notification", "application/vnd.syncml.ds.notification") );
multimap->insert( std::make_pair( ".vnd.syncml+xml", "application/vnd.syncml+xml") );
multimap->insert( std::make_pair( ".vnd.tableschema+json", "application/vnd.tableschema+json") );
multimap->insert( std::make_pair( ".vnd.tao.intent-module-archive", "application/vnd.tao.intent-module-archive") );
multimap->insert( std::make_pair( ".vnd.tcpdump.pcap", "application/vnd.tcpdump.pcap") );
multimap->insert( std::make_pair( ".vnd.think-cell.ppttc+json", "application/vnd.think-cell.ppttc+json") );
multimap->insert( std::make_pair( ".vnd.tml", "application/vnd.tml") );
multimap->insert( std::make_pair( ".vnd.tmd.mediaflex.api+xml", "application/vnd.tmd.mediaflex.api+xml") );
multimap->insert( std::make_pair( ".vnd.tmobile-livetv", "application/vnd.tmobile-livetv") );
multimap->insert( std::make_pair( ".vnd.tri.onesource", "application/vnd.tri.onesource") );
multimap->insert( std::make_pair( ".vnd.trid.tpt", "application/vnd.trid.tpt") );
multimap->insert( std::make_pair( ".vnd.triscape.mxs", "application/vnd.triscape.mxs") );
multimap->insert( std::make_pair( ".vnd.trueapp", "application/vnd.trueapp") );
multimap->insert( std::make_pair( ".vnd.truedoc", "application/vnd.truedoc") );
multimap->insert( std::make_pair( ".vnd.ubisoft.webplayer", "application/vnd.ubisoft.webplayer") );
multimap->insert( std::make_pair( ".vnd.ufdl", "application/vnd.ufdl") );
multimap->insert( std::make_pair( ".vnd.uiq.theme", "application/vnd.uiq.theme") );
multimap->insert( std::make_pair( ".vnd.umajin", "application/vnd.umajin") );
multimap->insert( std::make_pair( ".vnd.unity", "application/vnd.unity") );
multimap->insert( std::make_pair( ".vnd.uoml+xml", "application/vnd.uoml+xml") );
multimap->insert( std::make_pair( ".vnd.uplanet.alert", "application/vnd.uplanet.alert") );
multimap->insert( std::make_pair( ".vnd.uplanet.alert-wbxml", "application/vnd.uplanet.alert-wbxml") );
multimap->insert( std::make_pair( ".vnd.uplanet.bearer-choice", "application/vnd.uplanet.bearer-choice") );
multimap->insert( std::make_pair( ".vnd.uplanet.bearer-choice-wbxml", "application/vnd.uplanet.bearer-choice-wbxml") );
multimap->insert( std::make_pair( ".vnd.uplanet.cacheop", "application/vnd.uplanet.cacheop") );
multimap->insert( std::make_pair( ".vnd.uplanet.cacheop-wbxml", "application/vnd.uplanet.cacheop-wbxml") );
multimap->insert( std::make_pair( ".vnd.uplanet.channel", "application/vnd.uplanet.channel") );
multimap->insert( std::make_pair( ".vnd.uplanet.channel-wbxml", "application/vnd.uplanet.channel-wbxml") );
multimap->insert( std::make_pair( ".vnd.uplanet.list", "application/vnd.uplanet.list") );
multimap->insert( std::make_pair( ".vnd.uplanet.listcmd", "application/vnd.uplanet.listcmd") );
multimap->insert( std::make_pair( ".vnd.uplanet.listcmd-wbxml", "application/vnd.uplanet.listcmd-wbxml") );
multimap->insert( std::make_pair( ".vnd.uplanet.list-wbxml", "application/vnd.uplanet.list-wbxml") );
multimap->insert( std::make_pair( ".vnd.uri-multimap", "application/vnd.uri-multimap") );
multimap->insert( std::make_pair( ".vnd.uplanet.signal", "application/vnd.uplanet.signal") );
multimap->insert( std::make_pair( ".vnd.valve.source.material", "application/vnd.valve.source.material") );
multimap->insert( std::make_pair( ".vnd.vcx", "application/vnd.vcx") );
multimap->insert( std::make_pair( ".vnd.vd-study", "application/vnd.vd-study") );
multimap->insert( std::make_pair( ".vnd.vectorworks", "application/vnd.vectorworks") );
multimap->insert( std::make_pair( ".vnd.vel+json", "application/vnd.vel+json") );
multimap->insert( std::make_pair( ".vnd.verimatrix.vcas", "application/vnd.verimatrix.vcas") );
multimap->insert( std::make_pair( ".vnd.veritone.aion+json", "application/vnd.veritone.aion+json") );
multimap->insert( std::make_pair( ".vnd.veryant.thin", "application/vnd.veryant.thin") );
multimap->insert( std::make_pair( ".vnd.ves.encrypted", "application/vnd.ves.encrypted") );
multimap->insert( std::make_pair( ".vnd.vidsoft.vidconference", "application/vnd.vidsoft.vidconference") );
multimap->insert( std::make_pair( ".vnd.visio", "application/vnd.visio") );
multimap->insert( std::make_pair( ".vnd.visionary", "application/vnd.visionary") );
multimap->insert( std::make_pair( ".vnd.vividence.scriptfile", "application/vnd.vividence.scriptfile") );
multimap->insert( std::make_pair( ".vnd.vsf", "application/vnd.vsf") );
multimap->insert( std::make_pair( ".vnd.wap.sic", "application/vnd.wap.sic") );
multimap->insert( std::make_pair( ".vnd.wap.slc", "application/vnd.wap.slc") );
multimap->insert( std::make_pair( ".vnd.wap.wbxml", "application/vnd.wap.wbxml") );
multimap->insert( std::make_pair( ".vnd.wap.wmlc", "application/vnd.wap.wmlc") );
multimap->insert( std::make_pair( ".vnd.wap.wmlscriptc", "application/vnd.wap.wmlscriptc") );
multimap->insert( std::make_pair( ".vnd.wasmflow.wafl", "application/vnd.wasmflow.wafl") );
multimap->insert( std::make_pair( ".vnd.webturbo", "application/vnd.webturbo") );
multimap->insert( std::make_pair( ".vnd.wfa.dpp", "application/vnd.wfa.dpp") );
multimap->insert( std::make_pair( ".vnd.wfa.p2p", "application/vnd.wfa.p2p") );
multimap->insert( std::make_pair( ".vnd.wfa.wsc", "application/vnd.wfa.wsc") );
multimap->insert( std::make_pair( ".vnd.windows.devicepairing", "application/vnd.windows.devicepairing") );
multimap->insert( std::make_pair( ".vnd.wmc", "application/vnd.wmc") );
multimap->insert( std::make_pair( ".vnd.wmf.bootstrap", "application/vnd.wmf.bootstrap") );
multimap->insert( std::make_pair( ".vnd.wolfram.mathematica", "application/vnd.wolfram.mathematica") );
multimap->insert( std::make_pair( ".vnd.wolfram.mathematica.package", "application/vnd.wolfram.mathematica.package") );
multimap->insert( std::make_pair( ".vnd.wolfram.player", "application/vnd.wolfram.player") );
multimap->insert( std::make_pair( ".vnd.wordperfect", "application/vnd.wordperfect") );
multimap->insert( std::make_pair( ".vnd.wqd", "application/vnd.wqd") );
multimap->insert( std::make_pair( ".vnd.wrq-hp3000-labelled", "application/vnd.wrq-hp3000-labelled") );
multimap->insert( std::make_pair( ".vnd.wt.stf", "application/vnd.wt.stf") );
multimap->insert( std::make_pair( ".vnd.wv.csp+xml", "application/vnd.wv.csp+xml") );
multimap->insert( std::make_pair( ".vnd.wv.csp+wbxml", "application/vnd.wv.csp+wbxml") );
multimap->insert( std::make_pair( ".vnd.wv.ssp+xml", "application/vnd.wv.ssp+xml") );
multimap->insert( std::make_pair( ".vnd.xacml+json", "application/vnd.xacml+json") );
multimap->insert( std::make_pair( ".vnd.xara", "application/vnd.xara") );
multimap->insert( std::make_pair( ".vnd.xfdl", "application/vnd.xfdl") );
multimap->insert( std::make_pair( ".vnd.xfdl.webform", "application/vnd.xfdl.webform") );
multimap->insert( std::make_pair( ".vnd.xmi+xml", "application/vnd.xmi+xml") );
multimap->insert( std::make_pair( ".vnd.xmpie.cpkg", "application/vnd.xmpie.cpkg") );
multimap->insert( std::make_pair( ".vnd.xmpie.dpkg", "application/vnd.xmpie.dpkg") );
multimap->insert( std::make_pair( ".vnd.xmpie.plan", "application/vnd.xmpie.plan") );
multimap->insert( std::make_pair( ".vnd.xmpie.ppkg", "application/vnd.xmpie.ppkg") );
multimap->insert( std::make_pair( ".vnd.xmpie.xlim", "application/vnd.xmpie.xlim") );
multimap->insert( std::make_pair( ".vnd.yamaha.hv-dic", "application/vnd.yamaha.hv-dic") );
multimap->insert( std::make_pair( ".vnd.yamaha.hv-script", "application/vnd.yamaha.hv-script") );
multimap->insert( std::make_pair( ".vnd.yamaha.hv-voice", "application/vnd.yamaha.hv-voice") );
multimap->insert( std::make_pair( ".vnd.yamaha.openscoreformat.osfpvg+xml", "application/vnd.yamaha.openscoreformat.osfpvg+xml") );
multimap->insert( std::make_pair( ".vnd.yamaha.openscoreformat", "application/vnd.yamaha.openscoreformat") );
multimap->insert( std::make_pair( ".vnd.yamaha.remote-setup", "application/vnd.yamaha.remote-setup") );
multimap->insert( std::make_pair( ".vnd.yamaha.smaf-audio", "application/vnd.yamaha.smaf-audio") );
multimap->insert( std::make_pair( ".vnd.yamaha.smaf-phrase", "application/vnd.yamaha.smaf-phrase") );
multimap->insert( std::make_pair( ".vnd.yamaha.through-ngn", "application/vnd.yamaha.through-ngn") );
multimap->insert( std::make_pair( ".vnd.yamaha.tunnel-udpencap", "application/vnd.yamaha.tunnel-udpencap") );
multimap->insert( std::make_pair( ".vnd.yaoweme", "application/vnd.yaoweme") );
multimap->insert( std::make_pair( ".vnd.yellowriver-custom-menu", "application/vnd.yellowriver-custom-menu") );
multimap->insert( std::make_pair( ".vnd.youtube.yt (OBSOLETED in favor of video/vnd.youtube.yt)", "application/vnd.youtube.yt") );
multimap->insert( std::make_pair( ".vnd.zul", "application/vnd.zul") );
multimap->insert( std::make_pair( ".vnd.zzazz.deck+xml", "application/vnd.zzazz.deck+xml") );
multimap->insert( std::make_pair( ".voicexml+xml", "application/voicexml+xml") );
multimap->insert( std::make_pair( ".voucher-cms+json", "application/voucher-cms+json") );
multimap->insert( std::make_pair( ".vq-rtcpxr", "application/vq-rtcpxr") );
multimap->insert( std::make_pair( ".wasm", "application/wasm") );
multimap->insert( std::make_pair( ".watcherinfo+xml", "application/watcherinfo+xml") );
multimap->insert( std::make_pair( ".webpush-options+json", "application/webpush-options+json") );
multimap->insert( std::make_pair( ".whoispp-query", "application/whoispp-query") );
multimap->insert( std::make_pair( ".whoispp-response", "application/whoispp-response") );
multimap->insert( std::make_pair( ".widget", "application/widget") );
multimap->insert( std::make_pair( ".wita", "application/wita") );
multimap->insert( std::make_pair( ".wordperfect5.1", "application/wordperfect5.1") );
multimap->insert( std::make_pair( ".wsdl+xml", "application/wsdl+xml") );
multimap->insert( std::make_pair( ".wspolicy+xml", "application/wspolicy+xml") );
multimap->insert( std::make_pair( ".x-pki-message", "application/x-pki-message") );
multimap->insert( std::make_pair( ".x-www-form-urlencoded", "application/x-www-form-urlencoded") );
multimap->insert( std::make_pair( ".x-x509-ca-cert", "application/x-x509-ca-cert") );
multimap->insert( std::make_pair( ".x-x509-ca-ra-cert", "application/x-x509-ca-ra-cert") );
multimap->insert( std::make_pair( ".x-x509-next-ca-cert", "application/x-x509-next-ca-cert") );
multimap->insert( std::make_pair( ".x400-bp", "application/x400-bp") );
multimap->insert( std::make_pair( ".xacml+xml", "application/xacml+xml") );
multimap->insert( std::make_pair( ".xcap-att+xml", "application/xcap-att+xml") );
multimap->insert( std::make_pair( ".xcap-caps+xml", "application/xcap-caps+xml") );
multimap->insert( std::make_pair( ".xcap-diff+xml", "application/xcap-diff+xml") );
multimap->insert( std::make_pair( ".xcap-el+xml", "application/xcap-el+xml") );
multimap->insert( std::make_pair( ".xcap-error+xml", "application/xcap-error+xml") );
multimap->insert( std::make_pair( ".xcap-ns+xml", "application/xcap-ns+xml") );
multimap->insert( std::make_pair( ".xcon-conference-info-diff+xml", "application/xcon-conference-info-diff+xml") );
multimap->insert( std::make_pair( ".xcon-conference-info+xml", "application/xcon-conference-info+xml") );
multimap->insert( std::make_pair( ".xenc+xml", "application/xenc+xml") );
multimap->insert( std::make_pair( ".xfdf", "application/xfdf") );
multimap->insert( std::make_pair( ".xhtml+xml", "application/xhtml+xml") );
multimap->insert( std::make_pair( ".xliff+xml", "application/xliff+xml") );
multimap->insert( std::make_pair( ".xml", "application/xml") );
multimap->insert( std::make_pair( ".xml-dtd", "application/xml-dtd") );
multimap->insert( std::make_pair( ".xml-external-parsed-entity", "application/xml-external-parsed-entity") );
multimap->insert( std::make_pair( ".xml-patch+xml", "application/xml-patch+xml") );
multimap->insert( std::make_pair( ".xmpp+xml", "application/xmpp+xml") );
multimap->insert( std::make_pair( ".xop+xml", "application/xop+xml") );
multimap->insert( std::make_pair( ".xslt+xml", "application/xslt+xml") );
multimap->insert( std::make_pair( ".xv+xml", "application/xv+xml") );
multimap->insert( std::make_pair( ".yang", "application/yang") );
multimap->insert( std::make_pair( ".yang-data+cbor", "application/yang-data+cbor") );
multimap->insert( std::make_pair( ".yang-data+json", "application/yang-data+json") );
multimap->insert( std::make_pair( ".yang-data+xml", "application/yang-data+xml") );
multimap->insert( std::make_pair( ".yang-patch+json", "application/yang-patch+json") );
multimap->insert( std::make_pair( ".yang-patch+xml", "application/yang-patch+xml") );
multimap->insert( std::make_pair( ".yin+xml", "application/yin+xml") );
multimap->insert( std::make_pair( ".zip", "application/zip") );
multimap->insert( std::make_pair( ".zlib", "application/zlib") );
multimap->insert( std::make_pair( ".zstd", "application/zstd") );
multimap->insert( std::make_pair( ".1d-interleaved-parityfec", "audio/1d-interleaved-parityfec") );
multimap->insert( std::make_pair( ".32kadpcm", "audio/32kadpcm") );
multimap->insert( std::make_pair( ".3gpp", "audio/3gpp") );
multimap->insert( std::make_pair( ".3gpp2", "audio/3gpp2") );
multimap->insert( std::make_pair( ".aac", "audio/aac") );
multimap->insert( std::make_pair( ".ac3", "audio/ac3") );
multimap->insert( std::make_pair( ".AMR", "audio/AMR") );
multimap->insert( std::make_pair( ".AMR-WB", "audio/AMR-WB") );
multimap->insert( std::make_pair( ".amr-wb+", "audio/amr-wb+") );
multimap->insert( std::make_pair( ".aptx", "audio/aptx") );
multimap->insert( std::make_pair( ".asc", "audio/asc") );
multimap->insert( std::make_pair( ".ATRAC-ADVANCED-LOSSLESS", "audio/ATRAC-ADVANCED-LOSSLESS") );
multimap->insert( std::make_pair( ".ATRAC-X", "audio/ATRAC-X") );
multimap->insert( std::make_pair( ".ATRAC3", "audio/ATRAC3") );
multimap->insert( std::make_pair( ".basic", "audio/basic") );
multimap->insert( std::make_pair( ".BV16", "audio/BV16") );
multimap->insert( std::make_pair( ".BV32", "audio/BV32") );
multimap->insert( std::make_pair( ".clearmode", "audio/clearmode") );
multimap->insert( std::make_pair( ".CN", "audio/CN") );
multimap->insert( std::make_pair( ".DAT12", "audio/DAT12") );
multimap->insert( std::make_pair( ".dls", "audio/dls") );
multimap->insert( std::make_pair( ".dsr-es201108", "audio/dsr-es201108") );
multimap->insert( std::make_pair( ".dsr-es202050", "audio/dsr-es202050") );
multimap->insert( std::make_pair( ".dsr-es202211", "audio/dsr-es202211") );
multimap->insert( std::make_pair( ".dsr-es202212", "audio/dsr-es202212") );
multimap->insert( std::make_pair( ".DV", "audio/DV") );
multimap->insert( std::make_pair( ".DVI4", "audio/DVI4") );
multimap->insert( std::make_pair( ".eac3", "audio/eac3") );
multimap->insert( std::make_pair( ".encaprtp", "audio/encaprtp") );
multimap->insert( std::make_pair( ".EVRC", "audio/EVRC") );
multimap->insert( std::make_pair( ".EVRC-QCP", "audio/EVRC-QCP") );
multimap->insert( std::make_pair( ".EVRC0", "audio/EVRC0") );
multimap->insert( std::make_pair( ".EVRC1", "audio/EVRC1") );
multimap->insert( std::make_pair( ".EVRCB", "audio/EVRCB") );
multimap->insert( std::make_pair( ".EVRCB0", "audio/EVRCB0") );
multimap->insert( std::make_pair( ".EVRCB1", "audio/EVRCB1") );
multimap->insert( std::make_pair( ".EVRCNW", "audio/EVRCNW") );
multimap->insert( std::make_pair( ".EVRCNW0", "audio/EVRCNW0") );
multimap->insert( std::make_pair( ".EVRCNW1", "audio/EVRCNW1") );
multimap->insert( std::make_pair( ".EVRCWB", "audio/EVRCWB") );
multimap->insert( std::make_pair( ".EVRCWB0", "audio/EVRCWB0") );
multimap->insert( std::make_pair( ".EVRCWB1", "audio/EVRCWB1") );
multimap->insert( std::make_pair( ".EVS", "audio/EVS") );
multimap->insert( std::make_pair( ".example", "audio/example") );
multimap->insert( std::make_pair( ".flexfec", "audio/flexfec") );
multimap->insert( std::make_pair( ".fwdred", "audio/fwdred") );
multimap->insert( std::make_pair( ".G711-0", "audio/G711-0") );
multimap->insert( std::make_pair( ".G719", "audio/G719") );
multimap->insert( std::make_pair( ".G7221", "audio/G7221") );
multimap->insert( std::make_pair( ".G722", "audio/G722") );
multimap->insert( std::make_pair( ".G723", "audio/G723") );
multimap->insert( std::make_pair( ".G726-16", "audio/G726-16") );
multimap->insert( std::make_pair( ".G726-24", "audio/G726-24") );
multimap->insert( std::make_pair( ".G726-32", "audio/G726-32") );
multimap->insert( std::make_pair( ".G726-40", "audio/G726-40") );
multimap->insert( std::make_pair( ".G728", "audio/G728") );
multimap->insert( std::make_pair( ".G729", "audio/G729") );
multimap->insert( std::make_pair( ".G7291", "audio/G7291") );
multimap->insert( std::make_pair( ".G729D", "audio/G729D") );
multimap->insert( std::make_pair( ".G729E", "audio/G729E") );
multimap->insert( std::make_pair( ".GSM", "audio/GSM") );
multimap->insert( std::make_pair( ".GSM-EFR", "audio/GSM-EFR") );
multimap->insert( std::make_pair( ".GSM-HR-08", "audio/GSM-HR-08") );
multimap->insert( std::make_pair( ".iLBC", "audio/iLBC") );
multimap->insert( std::make_pair( ".ip-mr_v2.5", "audio/ip-mr_v2.5") );
multimap->insert( std::make_pair( ".L8", "audio/L8") );
multimap->insert( std::make_pair( ".L16", "audio/L16") );
multimap->insert( std::make_pair( ".L20", "audio/L20") );
multimap->insert( std::make_pair( ".L24", "audio/L24") );
multimap->insert( std::make_pair( ".LPC", "audio/LPC") );
multimap->insert( std::make_pair( ".MELP", "audio/MELP") );
multimap->insert( std::make_pair( ".MELP600", "audio/MELP600") );
multimap->insert( std::make_pair( ".MELP1200", "audio/MELP1200") );
multimap->insert( std::make_pair( ".MELP2400", "audio/MELP2400") );
multimap->insert( std::make_pair( ".mhas", "audio/mhas") );
multimap->insert( std::make_pair( ".mobile-xmf", "audio/mobile-xmf") );
multimap->insert( std::make_pair( ".MPA", "audio/MPA") );
multimap->insert( std::make_pair( ".mp3", "audio/mp3") );
multimap->insert( std::make_pair( ".mp4", "audio/mp4") );
multimap->insert( std::make_pair( ".MP4A-LATM", "audio/MP4A-LATM") );
multimap->insert( std::make_pair( ".mpa-robust", "audio/mpa-robust") );
multimap->insert( std::make_pair( ".mpeg", "audio/mpeg") );
multimap->insert( std::make_pair( ".mpeg4-generic", "audio/mpeg4-generic") );
multimap->insert( std::make_pair( ".ogg", "audio/ogg") );
multimap->insert( std::make_pair( ".opus", "audio/opus") );
multimap->insert( std::make_pair( ".parityfec", "audio/parityfec") );
multimap->insert( std::make_pair( ".PCMA", "audio/PCMA") );
multimap->insert( std::make_pair( ".PCMA-WB", "audio/PCMA-WB") );
multimap->insert( std::make_pair( ".PCMU", "audio/PCMU") );
multimap->insert( std::make_pair( ".PCMU-WB", "audio/PCMU-WB") );
multimap->insert( std::make_pair( ".prs.sid", "audio/prs.sid") );
multimap->insert( std::make_pair( ".QCELP", "audio/QCELP") );
multimap->insert( std::make_pair( ".raptorfec", "audio/raptorfec") );
multimap->insert( std::make_pair( ".RED", "audio/RED") );
multimap->insert( std::make_pair( ".rtp-enc-aescm128", "audio/rtp-enc-aescm128") );
multimap->insert( std::make_pair( ".rtploopback", "audio/rtploopback") );
multimap->insert( std::make_pair( ".rtp-midi", "audio/rtp-midi") );
multimap->insert( std::make_pair( ".rtx", "audio/rtx") );
multimap->insert( std::make_pair( ".scip", "audio/scip") );
multimap->insert( std::make_pair( ".SMV", "audio/SMV") );
multimap->insert( std::make_pair( ".SMV0", "audio/SMV0") );
multimap->insert( std::make_pair( ".SMV-QCP", "audio/SMV-QCP") );
multimap->insert( std::make_pair( ".sofa", "audio/sofa") );
multimap->insert( std::make_pair( ".sp-midi", "audio/sp-midi") );
multimap->insert( std::make_pair( ".speex", "audio/speex") );
multimap->insert( std::make_pair( ".t140c", "audio/t140c") );
multimap->insert( std::make_pair( ".t38", "audio/t38") );
multimap->insert( std::make_pair( ".telephone-event", "audio/telephone-event") );
multimap->insert( std::make_pair( ".TETRA_ACELP", "audio/TETRA_ACELP") );
multimap->insert( std::make_pair( ".TETRA_ACELP_BB", "audio/TETRA_ACELP_BB") );
multimap->insert( std::make_pair( ".tone", "audio/tone") );
multimap->insert( std::make_pair( ".TSVCIS", "audio/TSVCIS") );
multimap->insert( std::make_pair( ".UEMCLIP", "audio/UEMCLIP") );
multimap->insert( std::make_pair( ".ulpfec", "audio/ulpfec") );
multimap->insert( std::make_pair( ".usac", "audio/usac") );
multimap->insert( std::make_pair( ".VDVI", "audio/VDVI") );
multimap->insert( std::make_pair( ".VMR-WB", "audio/VMR-WB") );
multimap->insert( std::make_pair( ".vnd.3gpp.iufp", "audio/vnd.3gpp.iufp") );
multimap->insert( std::make_pair( ".vnd.4SB", "audio/vnd.4SB") );
multimap->insert( std::make_pair( ".vnd.audiokoz", "audio/vnd.audiokoz") );
multimap->insert( std::make_pair( ".vnd.CELP", "audio/vnd.CELP") );
multimap->insert( std::make_pair( ".vnd.cisco.nse", "audio/vnd.cisco.nse") );
multimap->insert( std::make_pair( ".vnd.cmles.radio-events", "audio/vnd.cmles.radio-events") );
multimap->insert( std::make_pair( ".vnd.cns.anp1", "audio/vnd.cns.anp1") );
multimap->insert( std::make_pair( ".vnd.cns.inf1", "audio/vnd.cns.inf1") );
multimap->insert( std::make_pair( ".vnd.dece.audio", "audio/vnd.dece.audio") );
multimap->insert( std::make_pair( ".vnd.digital-winds", "audio/vnd.digital-winds") );
multimap->insert( std::make_pair( ".vnd.dlna.adts", "audio/vnd.dlna.adts") );
multimap->insert( std::make_pair( ".vnd.dolby.heaac.1", "audio/vnd.dolby.heaac.1") );
multimap->insert( std::make_pair( ".vnd.dolby.heaac.2", "audio/vnd.dolby.heaac.2") );
multimap->insert( std::make_pair( ".vnd.dolby.mlp", "audio/vnd.dolby.mlp") );
multimap->insert( std::make_pair( ".vnd.dolby.mps", "audio/vnd.dolby.mps") );
multimap->insert( std::make_pair( ".vnd.dolby.pl2", "audio/vnd.dolby.pl2") );
multimap->insert( std::make_pair( ".vnd.dolby.pl2x", "audio/vnd.dolby.pl2x") );
multimap->insert( std::make_pair( ".vnd.dolby.pl2z", "audio/vnd.dolby.pl2z") );
multimap->insert( std::make_pair( ".vnd.dolby.pulse.1", "audio/vnd.dolby.pulse.1") );
multimap->insert( std::make_pair( ".vnd.dra", "audio/vnd.dra") );
multimap->insert( std::make_pair( ".vnd.dts", "audio/vnd.dts") );
multimap->insert( std::make_pair( ".vnd.dts.hd", "audio/vnd.dts.hd") );
multimap->insert( std::make_pair( ".vnd.dts.uhd", "audio/vnd.dts.uhd") );
multimap->insert( std::make_pair( ".vnd.dvb.file", "audio/vnd.dvb.file") );
multimap->insert( std::make_pair( ".vnd.everad.plj", "audio/vnd.everad.plj") );
multimap->insert( std::make_pair( ".vnd.hns.audio", "audio/vnd.hns.audio") );
multimap->insert( std::make_pair( ".vnd.lucent.voice", "audio/vnd.lucent.voice") );
multimap->insert( std::make_pair( ".vnd.ms-playready.media.pya", "audio/vnd.ms-playready.media.pya") );
multimap->insert( std::make_pair( ".vnd.nokia.mobile-xmf", "audio/vnd.nokia.mobile-xmf") );
multimap->insert( std::make_pair( ".vnd.nortel.vbk", "audio/vnd.nortel.vbk") );
multimap->insert( std::make_pair( ".vnd.nuera.ecelp4800", "audio/vnd.nuera.ecelp4800") );
multimap->insert( std::make_pair( ".vnd.nuera.ecelp7470", "audio/vnd.nuera.ecelp7470") );
multimap->insert( std::make_pair( ".vnd.nuera.ecelp9600", "audio/vnd.nuera.ecelp9600") );
multimap->insert( std::make_pair( ".vnd.octel.sbc", "audio/vnd.octel.sbc") );
multimap->insert( std::make_pair( ".vnd.presonus.multitrack", "audio/vnd.presonus.multitrack") );
multimap->insert( std::make_pair( ".vnd.qcelp - DEPRECATED in favor of audio/qcelp", "audio/vnd.qcelp") );
multimap->insert( std::make_pair( ".vnd.rhetorex.32kadpcm", "audio/vnd.rhetorex.32kadpcm") );
multimap->insert( std::make_pair( ".vnd.rip", "audio/vnd.rip") );
multimap->insert( std::make_pair( ".vnd.sealedmedia.softseal.mpeg", "audio/vnd.sealedmedia.softseal.mpeg") );
multimap->insert( std::make_pair( ".vnd.vmx.cvsd", "audio/vnd.vmx.cvsd") );
multimap->insert( std::make_pair( ".vorbis", "audio/vorbis") );
multimap->insert( std::make_pair( ".vorbis-config", "audio/vorbis-config") );
multimap->insert( std::make_pair( ".collection", "font/collection") );
multimap->insert( std::make_pair( ".otf", "font/otf") );
multimap->insert( std::make_pair( ".sfnt", "font/sfnt") );
multimap->insert( std::make_pair( ".ttf", "font/ttf") );
multimap->insert( std::make_pair( ".woff", "font/woff") );
multimap->insert( std::make_pair( ".woff2", "font/woff2") );
multimap->insert( std::make_pair( ".aces", "image/aces") );
multimap->insert( std::make_pair( ".avci", "image/avci") );
multimap->insert( std::make_pair( ".avcs", "image/avcs") );
multimap->insert( std::make_pair( ".avif", "image/avif") );
multimap->insert( std::make_pair( ".bmp", "image/bmp") );
multimap->insert( std::make_pair( ".cgm", "image/cgm") );
multimap->insert( std::make_pair( ".dicom-rle", "image/dicom-rle") );
multimap->insert( std::make_pair( ".dpx", "image/dpx") );
multimap->insert( std::make_pair( ".emf", "image/emf") );
multimap->insert( std::make_pair( ".example", "image/example") );
multimap->insert( std::make_pair( ".fits", "image/fits") );
multimap->insert( std::make_pair( ".g3fax", "image/g3fax") );
multimap->insert( std::make_pair( ".gif", "") );
multimap->insert( std::make_pair( ".heic", "image/heic") );
multimap->insert( std::make_pair( ".heic-sequence", "image/heic-sequence") );
multimap->insert( std::make_pair( ".heif", "image/heif") );
multimap->insert( std::make_pair( ".heif-sequence", "image/heif-sequence") );
multimap->insert( std::make_pair( ".hej2k", "image/hej2k") );
multimap->insert( std::make_pair( ".hsj2", "image/hsj2") );
multimap->insert( std::make_pair( ".ico", "image/ico") );
multimap->insert( std::make_pair( ".ief", "") );
multimap->insert( std::make_pair( ".jls", "image/jls") );
multimap->insert( std::make_pair( ".jp2", "image/jp2") );
multimap->insert( std::make_pair( ".jpeg", "image/jpeg") );
multimap->insert( std::make_pair( ".jpg", "image/jpg") );
multimap->insert( std::make_pair( ".jph", "image/jph") );
multimap->insert( std::make_pair( ".jphc", "image/jphc") );
multimap->insert( std::make_pair( ".jpm", "image/jpm") );
multimap->insert( std::make_pair( ".jpx", "image/jpx") );
multimap->insert( std::make_pair( ".jxr", "image/jxr") );
multimap->insert( std::make_pair( ".jxrA", "image/jxrA") );
multimap->insert( std::make_pair( ".jxrS", "image/jxrS") );
multimap->insert( std::make_pair( ".jxs", "image/jxs") );
multimap->insert( std::make_pair( ".jxsc", "image/jxsc") );
multimap->insert( std::make_pair( ".jxsi", "image/jxsi") );
multimap->insert( std::make_pair( ".jxss", "image/jxss") );
multimap->insert( std::make_pair( ".ktx", "image/ktx") );
multimap->insert( std::make_pair( ".ktx2", "image/ktx2") );
multimap->insert( std::make_pair( ".naplps", "image/naplps") );
multimap->insert( std::make_pair( ".png", "image/png") );
multimap->insert( std::make_pair( ".webp", "image/webp") );
multimap->insert( std::make_pair( ".prs.btif", "image/prs.btif") );
multimap->insert( std::make_pair( ".prs.pti", "image/prs.pti") );
multimap->insert( std::make_pair( ".pwg-raster", "image/pwg-raster") );
multimap->insert( std::make_pair( ".svg+xml", "image/svg+xml") );
multimap->insert( std::make_pair( ".t38", "image/t38") );
multimap->insert( std::make_pair( ".tiff", "image/tiff") );
multimap->insert( std::make_pair( ".tiff-fx", "image/tiff-fx") );
multimap->insert( std::make_pair( ".vnd.adobe.photoshop", "image/vnd.adobe.photoshop") );
multimap->insert( std::make_pair( ".vnd.airzip.accelerator.azv", "image/vnd.airzip.accelerator.azv") );
multimap->insert( std::make_pair( ".vnd.cns.inf2", "image/vnd.cns.inf2") );
multimap->insert( std::make_pair( ".vnd.dece.graphic", "image/vnd.dece.graphic") );
multimap->insert( std::make_pair( ".vnd.djvu", "image/vnd.djvu") );
multimap->insert( std::make_pair( ".vnd.dwg", "image/vnd.dwg") );
multimap->insert( std::make_pair( ".vnd.dxf", "image/vnd.dxf") );
multimap->insert( std::make_pair( ".vnd.dvb.subtitle", "image/vnd.dvb.subtitle") );
multimap->insert( std::make_pair( ".vnd.fastbidsheet", "image/vnd.fastbidsheet") );
multimap->insert( std::make_pair( ".vnd.fpx", "image/vnd.fpx") );
multimap->insert( std::make_pair( ".vnd.fst", "image/vnd.fst") );
multimap->insert( std::make_pair( ".vnd.fujixerox.edmics-mmr", "image/vnd.fujixerox.edmics-mmr") );
multimap->insert( std::make_pair( ".vnd.fujixerox.edmics-rlc", "image/vnd.fujixerox.edmics-rlc") );
multimap->insert( std::make_pair( ".vnd.globalgraphics.pgb", "image/vnd.globalgraphics.pgb") );
multimap->insert( std::make_pair( ".vnd.microsoft.icon", "image/vnd.microsoft.icon") );
multimap->insert( std::make_pair( ".vnd.mix", "image/vnd.mix") );
multimap->insert( std::make_pair( ".vnd.ms-modi", "image/vnd.ms-modi") );
multimap->insert( std::make_pair( ".vnd.mozilla.apng", "image/vnd.mozilla.apng") );
multimap->insert( std::make_pair( ".vnd.net-fpx", "image/vnd.net-fpx") );
multimap->insert( std::make_pair( ".vnd.pco.b16", "image/vnd.pco.b16") );
multimap->insert( std::make_pair( ".vnd.radiance", "image/vnd.radiance") );
multimap->insert( std::make_pair( ".vnd.sealed.png", "image/vnd.sealed.png") );
multimap->insert( std::make_pair( ".vnd.sealedmedia.softseal.gif", "image/vnd.sealedmedia.softseal.gif") );
multimap->insert( std::make_pair( ".vnd.sealedmedia.softseal.jpg", "image/vnd.sealedmedia.softseal.jpg") );
multimap->insert( std::make_pair( ".vnd.svf", "image/vnd.svf") );
multimap->insert( std::make_pair( ".vnd.tencent.tap", "image/vnd.tencent.tap") );
multimap->insert( std::make_pair( ".vnd.valve.source.texture", "image/vnd.valve.source.texture") );
multimap->insert( std::make_pair( ".vnd.wap.wbmp", "image/vnd.wap.wbmp") );
multimap->insert( std::make_pair( ".vnd.xiff", "image/vnd.xiff") );
multimap->insert( std::make_pair( ".vnd.zbrush.pcx", "image/vnd.zbrush.pcx") );
multimap->insert( std::make_pair( ".wmf", "image/wmf") );
multimap->insert( std::make_pair( ".x-emf - DEPRECATED in favor of image/emf", "image/emf") );
multimap->insert( std::make_pair( ".x-wmf - DEPRECATED in favor of image/wmf", "image/wmf") );
multimap->insert( std::make_pair( ".bhttp", "message/bhttp") );
multimap->insert( std::make_pair( ".CPIM", "message/CPIM") );
multimap->insert( std::make_pair( ".delivery-status", "message/delivery-status") );
multimap->insert( std::make_pair( ".disposition-notification", "message/disposition-notification") );
multimap->insert( std::make_pair( ".example", "message/example") );
multimap->insert( std::make_pair( ".external-body", "") );
multimap->insert( std::make_pair( ".feedback-report", "message/feedback-report") );
multimap->insert( std::make_pair( ".global", "message/global") );
multimap->insert( std::make_pair( ".global-delivery-status", "message/global-delivery-status") );
multimap->insert( std::make_pair( ".global-disposition-notification", "message/global-disposition-notification") );
multimap->insert( std::make_pair( ".global-headers", "message/global-headers") );
multimap->insert( std::make_pair( ".http", "message/http") );
multimap->insert( std::make_pair( ".imdn+xml", "message/imdn+xml") );
multimap->insert( std::make_pair( ".news (OBSOLETED by [RFC5537])", "message/news") );
multimap->insert( std::make_pair( ".partial", "") );
multimap->insert( std::make_pair( ".rfc822", "") );
multimap->insert( std::make_pair( ".s-http (OBSOLETE)", "message/s-http") );
multimap->insert( std::make_pair( ".sip", "message/sip") );
multimap->insert( std::make_pair( ".sipfrag", "message/sipfrag") );
multimap->insert( std::make_pair( ".tracking-status", "message/tracking-status") );
multimap->insert( std::make_pair( ".vnd.si.simp (OBSOLETED by request)", "message/vnd.si.simp") );
multimap->insert( std::make_pair( ".vnd.wfa.wsc", "message/vnd.wfa.wsc") );
multimap->insert( std::make_pair( ".3mf", "model/3mf") );
multimap->insert( std::make_pair( ".e57", "model/e57") );
multimap->insert( std::make_pair( ".example", "model/example") );
multimap->insert( std::make_pair( ".gltf-binary", "model/gltf-binary") );
multimap->insert( std::make_pair( ".gltf+json", "model/gltf+json") );
multimap->insert( std::make_pair( ".iges", "model/iges") );
multimap->insert( std::make_pair( ".mesh", "") );
multimap->insert( std::make_pair( ".mtl", "model/mtl") );
multimap->insert( std::make_pair( ".obj", "model/obj") );
multimap->insert( std::make_pair( ".prc", "model/prc") );
multimap->insert( std::make_pair( ".step", "model/step") );
multimap->insert( std::make_pair( ".step+xml", "model/step+xml") );
multimap->insert( std::make_pair( ".step+zip", "model/step+zip") );
multimap->insert( std::make_pair( ".step-xml+zip", "model/step-xml+zip") );
multimap->insert( std::make_pair( ".stl", "model/stl") );
multimap->insert( std::make_pair( ".u3d", "model/u3d") );
multimap->insert( std::make_pair( ".vnd.collada+xml", "model/vnd.collada+xml") );
multimap->insert( std::make_pair( ".vnd.dwf", "model/vnd.dwf") );
multimap->insert( std::make_pair( ".vnd.flatland.3dml", "model/vnd.flatland.3dml") );
multimap->insert( std::make_pair( ".vnd.gdl", "model/vnd.gdl") );
multimap->insert( std::make_pair( ".vnd.gs-gdl", "model/vnd.gs-gdl") );
multimap->insert( std::make_pair( ".vnd.gtw", "model/vnd.gtw") );
multimap->insert( std::make_pair( ".vnd.moml+xml", "model/vnd.moml+xml") );
multimap->insert( std::make_pair( ".vnd.mts", "model/vnd.mts") );
multimap->insert( std::make_pair( ".vnd.opengex", "model/vnd.opengex") );
multimap->insert( std::make_pair( ".vnd.parasolid.transmit.binary", "model/vnd.parasolid.transmit.binary") );
multimap->insert( std::make_pair( ".vnd.parasolid.transmit.text", "model/vnd.parasolid.transmit.text") );
multimap->insert( std::make_pair( ".vnd.pytha.pyox", "model/vnd.pytha.pyox") );
multimap->insert( std::make_pair( ".vnd.rosette.annotated-data-model", "model/vnd.rosette.annotated-data-model") );
multimap->insert( std::make_pair( ".vnd.sap.vds", "model/vnd.sap.vds") );
multimap->insert( std::make_pair( ".vnd.usda", "model/vnd.usda") );
multimap->insert( std::make_pair( ".vnd.usdz+zip", "model/vnd.usdz+zip") );
multimap->insert( std::make_pair( ".vnd.valve.source.compiled-multimap", "model/vnd.valve.source.compiled-multimap") );
multimap->insert( std::make_pair( ".vnd.vtu", "model/vnd.vtu") );
multimap->insert( std::make_pair( ".vrml", "") );
multimap->insert( std::make_pair( ".x3d-vrml", "model/x3d-vrml") );
multimap->insert( std::make_pair( ".x3d+fastinfoset", "model/x3d+fastinfoset") );
multimap->insert( std::make_pair( ".x3d+xml", "model/x3d+xml") );
multimap->insert( std::make_pair( ".alternative", "") );
multimap->insert( std::make_pair( ".appledouble", "multipart/appledouble") );
multimap->insert( std::make_pair( ".byteranges", "multipart/byteranges") );
multimap->insert( std::make_pair( ".digest", "") );
multimap->insert( std::make_pair( ".encrypted", "multipart/encrypted") );
multimap->insert( std::make_pair( ".example", "multipart/example") );
multimap->insert( std::make_pair( ".form-data", "multipart/form-data") );
multimap->insert( std::make_pair( ".header-set", "multipart/header-set") );
multimap->insert( std::make_pair( ".mixed", "") );
multimap->insert( std::make_pair( ".multilingual", "multipart/multilingual") );
multimap->insert( std::make_pair( ".parallel", "") );
multimap->insert( std::make_pair( ".related", "multipart/related") );
multimap->insert( std::make_pair( ".report", "multipart/report") );
multimap->insert( std::make_pair( ".signed", "multipart/signed") );
multimap->insert( std::make_pair( ".vnd.bint.med-plus", "multipart/vnd.bint.med-plus") );
multimap->insert( std::make_pair( ".voice-message", "multipart/voice-message") );
multimap->insert( std::make_pair( ".x-mixed-replace", "multipart/x-mixed-replace") );
multimap->insert( std::make_pair( ".1d-interleaved-parityfec", "text/1d-interleaved-parityfec") );
multimap->insert( std::make_pair( ".cache-manifest", "text/cache-manifest") );
multimap->insert( std::make_pair( ".calendar", "text/calendar") );
multimap->insert( std::make_pair( ".cql", "text/cql") );
multimap->insert( std::make_pair( ".cql-expression", "text/cql-expression") );
multimap->insert( std::make_pair( ".cql-identifier", "text/cql-identifier") );
multimap->insert( std::make_pair( ".css", "text/css") );
multimap->insert( std::make_pair( ".csv", "text/csv") );
multimap->insert( std::make_pair( ".csv-schema", "text/csv-schema") );
multimap->insert( std::make_pair( ".directory - DEPRECATED by RFC6350", "text/directory") );
multimap->insert( std::make_pair( ".dns", "text/dns") );
multimap->insert( std::make_pair( ".ecmascript (OBSOLETED in favor of text/javascript)", "text/ecmascript") );
multimap->insert( std::make_pair( ".encaprtp", "text/encaprtp") );
multimap->insert( std::make_pair( ".enriched", "") );
multimap->insert( std::make_pair( ".example", "text/example") );
multimap->insert( std::make_pair( ".fhirpath", "text/fhirpath") );
multimap->insert( std::make_pair( ".flexfec", "text/flexfec") );
multimap->insert( std::make_pair( ".fwdred", "text/fwdred") );
multimap->insert( std::make_pair( ".gff3", "text/gff3") );
multimap->insert( std::make_pair( ".grammar-ref-list", "text/grammar-ref-list") );
multimap->insert( std::make_pair( ".hl7v2", "text/hl7v2") );
multimap->insert( std::make_pair( ".html", "text/html") );
multimap->insert( std::make_pair( ".javascript", "text/javascript") );
multimap->insert( std::make_pair( ".jcr-cnd", "text/jcr-cnd") );
multimap->insert( std::make_pair( ".markdown", "text/markdown") );
multimap->insert( std::make_pair( ".mizar", "text/mizar") );
multimap->insert( std::make_pair( ".n3", "text/n3") );
multimap->insert( std::make_pair( ".parameters", "text/parameters") );
multimap->insert( std::make_pair( ".parityfec", "text/parityfec") );
multimap->insert( std::make_pair( ".plain", "") );
multimap->insert( std::make_pair( ".provenance-notation", "text/provenance-notation") );
multimap->insert( std::make_pair( ".prs.fallenstein.rst", "text/prs.fallenstein.rst") );
multimap->insert( std::make_pair( ".prs.lines.tag", "text/prs.lines.tag") );
multimap->insert( std::make_pair( ".prs.prop.logic", "text/prs.prop.logic") );
multimap->insert( std::make_pair( ".raptorfec", "text/raptorfec") );
multimap->insert( std::make_pair( ".RED", "text/RED") );
multimap->insert( std::make_pair( ".rfc822-headers", "text/rfc822-headers") );
multimap->insert( std::make_pair( ".richtext", "") );
multimap->insert( std::make_pair( ".rtf", "text/rtf") );
multimap->insert( std::make_pair( ".rtp-enc-aescm128", "text/rtp-enc-aescm128") );
multimap->insert( std::make_pair( ".rtploopback", "text/rtploopback") );
multimap->insert( std::make_pair( ".rtx", "text/rtx") );
multimap->insert( std::make_pair( ".SGML", "text/SGML") );
multimap->insert( std::make_pair( ".shaclc", "text/shaclc") );
multimap->insert( std::make_pair( ".shex", "text/shex") );
multimap->insert( std::make_pair( ".spdx", "text/spdx") );
multimap->insert( std::make_pair( ".strings", "text/strings") );
multimap->insert( std::make_pair( ".t140", "text/t140") );
multimap->insert( std::make_pair( ".tab-separated-values", "text/tab-separated-values") );
multimap->insert( std::make_pair( ".troff", "text/troff") );
multimap->insert( std::make_pair( ".turtle", "text/turtle") );
multimap->insert( std::make_pair( ".ulpfec", "text/ulpfec") );
multimap->insert( std::make_pair( ".uri-list", "text/uri-list") );
multimap->insert( std::make_pair( ".vcard", "text/vcard") );
multimap->insert( std::make_pair( ".vnd.a", "text/vnd.a") );
multimap->insert( std::make_pair( ".vnd.abc", "text/vnd.abc") );
multimap->insert( std::make_pair( ".vnd.ascii-art", "text/vnd.ascii-art") );
multimap->insert( std::make_pair( ".vnd.curl", "text/vnd.curl") );
multimap->insert( std::make_pair( ".vnd.debian.copyright", "text/vnd.debian.copyright") );
multimap->insert( std::make_pair( ".vnd.DMClientScript", "text/vnd.DMClientScript") );
multimap->insert( std::make_pair( ".vnd.dvb.subtitle", "text/vnd.dvb.subtitle") );
multimap->insert( std::make_pair( ".vnd.esmertec.theme-descriptor", "text/vnd.esmertec.theme-descriptor") );
multimap->insert( std::make_pair( ".vnd.exchangeable", "text/vnd.exchangeable") );
multimap->insert( std::make_pair( ".vnd.familysearch.gedcom", "text/vnd.familysearch.gedcom") );
multimap->insert( std::make_pair( ".vnd.ficlab.flt", "text/vnd.ficlab.flt") );
multimap->insert( std::make_pair( ".vnd.fly", "text/vnd.fly") );
multimap->insert( std::make_pair( ".vnd.fmi.flexstor", "text/vnd.fmi.flexstor") );
multimap->insert( std::make_pair( ".vnd.gml", "text/vnd.gml") );
multimap->insert( std::make_pair( ".vnd.graphviz", "text/vnd.graphviz") );
multimap->insert( std::make_pair( ".vnd.hans", "text/vnd.hans") );
multimap->insert( std::make_pair( ".vnd.hgl", "text/vnd.hgl") );
multimap->insert( std::make_pair( ".vnd.in3d.3dml", "text/vnd.in3d.3dml") );
multimap->insert( std::make_pair( ".vnd.in3d.spot", "text/vnd.in3d.spot") );
multimap->insert( std::make_pair( ".vnd.IPTC.NewsML", "text/vnd.IPTC.NewsML") );
multimap->insert( std::make_pair( ".vnd.IPTC.NITF", "text/vnd.IPTC.NITF") );
multimap->insert( std::make_pair( ".vnd.latex-z", "text/vnd.latex-z") );
multimap->insert( std::make_pair( ".vnd.motorola.reflex", "text/vnd.motorola.reflex") );
multimap->insert( std::make_pair( ".vnd.ms-mediapackage", "text/vnd.ms-mediapackage") );
multimap->insert( std::make_pair( ".vnd.net2phone.commcenter.command", "text/vnd.net2phone.commcenter.command") );
multimap->insert( std::make_pair( ".vnd.radisys.msml-basic-layout", "text/vnd.radisys.msml-basic-layout") );
multimap->insert( std::make_pair( ".vnd.senx.warpscript", "text/vnd.senx.warpscript") );
multimap->insert( std::make_pair( ".vnd.si.uricatalogue (OBSOLETED by request)", "text/vnd.si.uricatalogue") );
multimap->insert( std::make_pair( ".vnd.sun.j2me.app-descriptor", "text/vnd.sun.j2me.app-descriptor") );
multimap->insert( std::make_pair( ".vnd.sosi", "text/vnd.sosi") );
multimap->insert( std::make_pair( ".vnd.trolltech.linguist", "text/vnd.trolltech.linguist") );
multimap->insert( std::make_pair( ".vnd.wap.si", "text/vnd.wap.si") );
multimap->insert( std::make_pair( ".vnd.wap.sl", "text/vnd.wap.sl") );
multimap->insert( std::make_pair( ".vnd.wap.wml", "text/vnd.wap.wml") );
multimap->insert( std::make_pair( ".vnd.wap.wmlscript", "text/vnd.wap.wmlscript") );
multimap->insert( std::make_pair( ".vtt", "text/vtt") );
multimap->insert( std::make_pair( ".xml", "text/xml") );
multimap->insert( std::make_pair( ".xml-external-parsed-entity", "text/xml-external-parsed-entity") );
multimap->insert( std::make_pair( ".1d-interleaved-parityfec", "video/1d-interleaved-parityfec") );
multimap->insert( std::make_pair( ".3gpp", "video/3gpp") );
multimap->insert( std::make_pair( ".3gpp2", "video/3gpp2") );
multimap->insert( std::make_pair( ".3gpp-tt", "video/3gpp-tt") );
multimap->insert( std::make_pair( ".AV1", "video/AV1") );
multimap->insert( std::make_pair( ".BMPEG", "video/BMPEG") );
multimap->insert( std::make_pair( ".BT656", "video/BT656") );
multimap->insert( std::make_pair( ".CelB", "video/CelB") );
multimap->insert( std::make_pair( ".DV", "video/DV") );
multimap->insert( std::make_pair( ".encaprtp", "video/encaprtp") );
multimap->insert( std::make_pair( ".example", "video/example") );
multimap->insert( std::make_pair( ".FFV1", "video/FFV1") );
multimap->insert( std::make_pair( ".flexfec", "video/flexfec") );
multimap->insert( std::make_pair( ".H261", "video/H261") );
multimap->insert( std::make_pair( ".H263", "video/H263") );
multimap->insert( std::make_pair( ".H263-1998", "video/H263-1998") );
multimap->insert( std::make_pair( ".H263-2000", "video/H263-2000") );
multimap->insert( std::make_pair( ".H264", "video/H264") );
multimap->insert( std::make_pair( ".H264-RCDO", "video/H264-RCDO") );
multimap->insert( std::make_pair( ".H264-SVC", "video/H264-SVC") );
multimap->insert( std::make_pair( ".H265", "video/H265") );
multimap->insert( std::make_pair( ".H266", "video/H266") );
multimap->insert( std::make_pair( ".iso.segment", "video/iso.segment") );
multimap->insert( std::make_pair( ".JPEG", "video/JPEG") );
multimap->insert( std::make_pair( ".jpeg2000", "video/jpeg2000") );
multimap->insert( std::make_pair( ".jxsv", "video/jxsv") );
multimap->insert( std::make_pair( ".mj2", "video/mj2") );
multimap->insert( std::make_pair( ".MP1S", "video/MP1S") );
multimap->insert( std::make_pair( ".MP2P", "video/MP2P") );
multimap->insert( std::make_pair( ".MP2T", "video/MP2T") );
multimap->insert( std::make_pair( ".mp4", "video/mp4") );
multimap->insert( std::make_pair( ".MP4V-ES", "video/MP4V-ES") );
multimap->insert( std::make_pair( ".MPV", "video/MPV") );
multimap->insert( std::make_pair( ".mpeg", "") );
multimap->insert( std::make_pair( ".mpeg4-generic", "video/mpeg4-generic") );
multimap->insert( std::make_pair( ".nv", "video/nv") );
multimap->insert( std::make_pair( ".ogg", "video/ogg") );
multimap->insert( std::make_pair( ".parityfec", "video/parityfec") );
multimap->insert( std::make_pair( ".pointer", "video/pointer") );
multimap->insert( std::make_pair( ".quicktime", "video/quicktime") );
multimap->insert( std::make_pair( ".raptorfec", "video/raptorfec") );
multimap->insert( std::make_pair( ".raw", "video/raw") );
multimap->insert( std::make_pair( ".rtp-enc-aescm128", "video/rtp-enc-aescm128") );
multimap->insert( std::make_pair( ".rtploopback", "video/rtploopback") );
multimap->insert( std::make_pair( ".rtx", "video/rtx") );
multimap->insert( std::make_pair( ".scip", "video/scip") );
multimap->insert( std::make_pair( ".smpte291", "video/smpte291") );
multimap->insert( std::make_pair( ".SMPTE292M", "video/SMPTE292M") );
multimap->insert( std::make_pair( ".ulpfec", "video/ulpfec") );
multimap->insert( std::make_pair( ".vc1", "video/vc1") );
multimap->insert( std::make_pair( ".vc2", "video/vc2") );
multimap->insert( std::make_pair( ".vnd.CCTV", "video/vnd.CCTV") );
multimap->insert( std::make_pair( ".vnd.dece.hd", "video/vnd.dece.hd") );
multimap->insert( std::make_pair( ".vnd.dece.mobile", "video/vnd.dece.mobile") );
multimap->insert( std::make_pair( ".vnd.dece.mp4", "video/vnd.dece.mp4") );
multimap->insert( std::make_pair( ".vnd.dece.pd", "video/vnd.dece.pd") );
multimap->insert( std::make_pair( ".vnd.dece.sd", "video/vnd.dece.sd") );
multimap->insert( std::make_pair( ".vnd.dece.video", "video/vnd.dece.video") );
multimap->insert( std::make_pair( ".vnd.directv.mpeg", "video/vnd.directv.mpeg") );
multimap->insert( std::make_pair( ".vnd.directv.mpeg-tts", "video/vnd.directv.mpeg-tts") );
multimap->insert( std::make_pair( ".vnd.dlna.mpeg-tts", "video/vnd.dlna.mpeg-tts") );
multimap->insert( std::make_pair( ".vnd.dvb.file", "video/vnd.dvb.file") );
multimap->insert( std::make_pair( ".vnd.fvt", "video/vnd.fvt") );
multimap->insert( std::make_pair( ".vnd.hns.video", "video/vnd.hns.video") );
multimap->insert( std::make_pair( ".vnd.iptvforum.1dparityfec-1010", "video/vnd.iptvforum.1dparityfec-1010") );
multimap->insert( std::make_pair( ".vnd.iptvforum.1dparityfec-2005", "video/vnd.iptvforum.1dparityfec-2005") );
multimap->insert( std::make_pair( ".vnd.iptvforum.2dparityfec-1010", "video/vnd.iptvforum.2dparityfec-1010") );
multimap->insert( std::make_pair( ".vnd.iptvforum.2dparityfec-2005", "video/vnd.iptvforum.2dparityfec-2005") );
multimap->insert( std::make_pair( ".vnd.iptvforum.ttsavc", "video/vnd.iptvforum.ttsavc") );
multimap->insert( std::make_pair( ".vnd.iptvforum.ttsmpeg2", "video/vnd.iptvforum.ttsmpeg2") );
multimap->insert( std::make_pair( ".vnd.motorola.video", "video/vnd.motorola.video") );
multimap->insert( std::make_pair( ".vnd.motorola.videop", "video/vnd.motorola.videop") );
multimap->insert( std::make_pair( ".vnd.mpegurl", "video/vnd.mpegurl") );
multimap->insert( std::make_pair( ".vnd.ms-playready.media.pyv", "video/vnd.ms-playready.media.pyv") );
multimap->insert( std::make_pair( ".vnd.nokia.interleaved-multimedia", "video/vnd.nokia.interleaved-multimedia") );
multimap->insert( std::make_pair( ".vnd.nokia.mp4vr", "video/vnd.nokia.mp4vr") );
multimap->insert( std::make_pair( ".vnd.nokia.videovoip", "video/vnd.nokia.videovoip") );
multimap->insert( std::make_pair( ".vnd.objectvideo", "video/vnd.objectvideo") );
multimap->insert( std::make_pair( ".vnd.radgamettools.bink", "video/vnd.radgamettools.bink") );
multimap->insert( std::make_pair( ".vnd.radgamettools.smacker", "video/vnd.radgamettools.smacker") );
multimap->insert( std::make_pair( ".vnd.sealed.mpeg1", "video/vnd.sealed.mpeg1") );
multimap->insert( std::make_pair( ".vnd.sealed.mpeg4", "video/vnd.sealed.mpeg4") );
multimap->insert( std::make_pair( ".vnd.sealed.swf", "video/vnd.sealed.swf") );
multimap->insert( std::make_pair( ".vnd.sealedmedia.softseal.mov", "video/vnd.sealedmedia.softseal.mov") );
multimap->insert( std::make_pair( ".vnd.uvvu.mp4", "video/vnd.uvvu.mp4") );
multimap->insert( std::make_pair( ".vnd.youtube.yt", "video/vnd.youtube.yt") );
multimap->insert( std::make_pair( ".vnd.vivo", "video/vnd.vivo") );
multimap->insert( std::make_pair( ".VP8", "video/VP8") );
multimap->insert( std::make_pair( ".VP9", "video/VP9") );
